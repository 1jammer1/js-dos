{"version":3,"sources":["Renderer.tsx","serviceWorker.ts","index.tsx","Landing.tsx"],"names":["Renderer","props","url","path","useState","frameKey","setFrameKey","content","setContent","frameContent","setFrameConent","request","setRequest","error","setError","cycles","setCycles","wdosboxUrl","setWdosboxUrl","autolock","setAutolock","proxy","setProxy","iframeCallback","useCallback","iframe","contentWindow","document","write","focus","xmlRequest","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","transformContent","responseText","replace","send","style","display","justifyContent","alignItems","marginTop","marginRight","intent","Intent","PRIMARY","className","color","fontWeight","window","location","pathname","variant","Number","parseInt","flexDirection","height","href","title","tabIndex","key","ref","allowFullScreen","flexShrink","flexGrow","alignSelf","border","width","paddingTop","paddingBottom","flexWrap","options","value","onChange","ev","currentTarget","checked","label","large","marginBottom","alignIndicator","Alignment","RIGHT","Classes","INPUT","dir","e","text","icon","IconNames","FULLSCREEN","onClick","ci","fullscreen","REFRESH","DANGER","NONE","overflow","onValueChange","highlight","code","languages","html","padding","backgroundColor","fontFamily","fontSize","Boolean","hostname","match","search","ReactDOM","render","substr","getElementById","fixedToTop","elevation","Elevation","TWO","margin","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03b96b71.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { Spinner, Intent, ButtonGroup, Button, Navbar, NavbarHeading, NavbarGroup, HTMLSelect, NavbarDivider, Checkbox, Alignment, Classes } from \"@blueprintjs/core\";\nimport { highlight, languages } from 'prismjs';\n\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport { IconNames } from '@blueprintjs/icons';\n\nexport default function Renderer(props: { path: string, cycles: string, autolock: boolean }) {\n  const url = \"https://js-dos.com/6.22/current/test/\" + props.path + \".html\";\n\n  const [frameKey, setFrameKey] = useState<number>(0);\n  const [content, setContent] = useState<string | null>(null);\n  const [frameContent, setFrameConent] = useState<string | null>(null);\n  const [request, setRequest] = useState<XMLHttpRequest | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const [cycles, setCycles] = useState<string>(props.cycles);\n  const [wdosboxUrl, setWdosboxUrl] = useState<string>(\"wdosbox.js\");\n  const [autolock, setAutolock] = useState<boolean>(props.autolock);\n\n  const [proxy, setProxy] = useState(null);\n\n  const iframeCallback = useCallback((iframe) => {\n    if (iframe !== null && frameContent != null) {\n      const proxy = iframe.contentWindow;\n      proxy.document.write(frameContent);\n      iframe.focus();\n\n      setProxy(proxy);\n    }\n  }, [frameKey]);\n\n  if (error != null) {\n    return <div>Unexpected error: {error}</div>;\n  }\n\n  const loaded = content !== null;\n  if (!loaded) {\n    if (!request) {\n      const xmlRequest = new XMLHttpRequest();\n      xmlRequest.open('GET', url);\n      xmlRequest.onerror = () => {\n        setError(\"Unable to download url: \" + url);\n      };\n      xmlRequest.onreadystatechange = () => {\n        if (xmlRequest.readyState === 4) {\n          if (xmlRequest.status === 200) {\n            const content = transformContent(xmlRequest.responseText, wdosboxUrl, cycles, autolock)\n              .replace(/.*js-dos\\.js.*/, \"  <script src=\\\"https://js-dos.com/6.22/current/js-dos.js\\\"></script>\");\n            setContent(content);\n            setFrameConent(content);\n            setFrameKey(frameKey + 1);\n          } else {\n            setError(\"Wrong response code: \" + xmlRequest.status);\n          }\n        }\n      };\n      xmlRequest.send();\n      setRequest(xmlRequest);\n    }\n\n    return <div style={{\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: \"1em\",\n    }}>\n      <div style={{ marginRight: \"1em\" }}><Spinner intent={Intent.PRIMARY} /></div>\n      <div>Loading documentation\n        <span className=\"bp3-text-large\" style={{\n          color: \"#48AFF0\",\n          fontWeight: \"bold\",\n        }}>{window.location.pathname}</span></div>\n    </div >;\n  }\n\n  function reload() {\n    setFrameConent(content);\n    setFrameKey(frameKey + 1);\n  }\n\n  function transformContent(content: string | null, variant: string, cycles: string, autolock: boolean) {\n    if (!Number.parseInt(cycles)) {\n      cycles = \"\\\"\" + cycles + \"\\\"\";\n    }\n    const newContent = (content + \"\")\n      .replace(/autolock:.*/, \"autolock: \" + autolock + \",\")\n      .replace(/cycles:.*/, \"cycles: \" + cycles + \",\")\n      .replace(/wdosboxUrl:.*/, \"wdosboxUrl: \\\"https://js-dos.com/6.22/current/\" + variant + \"\\\",\");\n\n    return newContent;\n  }\n\n  function doSetCycles(value: string) {\n    setCycles(value);\n    setContent(transformContent(content, wdosboxUrl, value, autolock));\n  }\n\n  function doSetVariant(value: string) {\n    setWdosboxUrl(value);\n    setContent(transformContent(content, value, cycles, autolock));\n  }\n\n  function doSetAutolock(value: boolean) {\n    setAutolock(value);\n    setContent(transformContent(content, wdosboxUrl, cycles, value));\n  }\n\n  function enterFullscreen() {\n    (proxy as any).ci.fullscreen();\n  }\n\n  return <div style={{\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  }}>\n    <Navbar>\n      <NavbarGroup >\n        <NavbarHeading>\n          <a href=\"https://js-dos.com\">js-dos 6.22</a>\n        </NavbarHeading>\n        <NavbarDivider>\n        </NavbarDivider>\n        <NavbarHeading>\n          <a href=\"https://js-dos.com/6.22/examples\">Examples</a>\n        </NavbarHeading>\n      </NavbarGroup>\n    </Navbar>\n    <iframe title=\"frame\"\n      tabIndex={1}\n      key={\"iframe_\" + frameKey}\n      ref={iframeCallback}\n      allowFullScreen\n      style={{\n        flexShrink: 0,\n        flexGrow: 0,\n        alignSelf: \"center\",\n        border: \"none\",\n        width: \"64vh\",\n        height: \"40vh\",\n      }} />\n    <Navbar style={{\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      height: \"auto\",\n      paddingTop: \"5px\",\n      paddingBottom: \"5px\",\n    }}>\n      <NavbarGroup style={{\n        flexWrap: \"wrap\",\n        height: \"auto\",\n      }}>\n        <NavbarHeading>Variant</NavbarHeading>\n        <HTMLSelect options={[\"wdosbox.js\", \"wdosbox-emterp.js\", \"wdosbox-nosync.js\",\n          \"dosbox-emterp.js\", \"dosbox-nosync.js\"]} value={wdosboxUrl}\n          onChange={(ev) => doSetVariant(ev.currentTarget.value)}></HTMLSelect>\n        <NavbarDivider></NavbarDivider>\n        <Checkbox checked={autolock} label=\"Mouselock\" large={true}\n          onChange={(ev) => doSetAutolock(ev.currentTarget.checked)}\n          style={{ marginBottom: 0 }} alignIndicator={Alignment.RIGHT}></Checkbox>\n        <NavbarDivider></NavbarDivider>\n        <NavbarHeading>Cycles</NavbarHeading>\n        <div style={{ width: \"100px\" }}>\n          <input className={Classes.INPUT}\n            value={cycles} dir=\"auto\" onChange={(e) => doSetCycles(e.currentTarget.value)} />\n        </div>\n      </NavbarGroup>\n      <NavbarGroup>\n        <ButtonGroup>\n          <Button text=\"Fullscreen\" icon={IconNames.FULLSCREEN} onClick={enterFullscreen}></Button>\n          <Button icon={IconNames.REFRESH} onClick={reload}\n            intent={content !== frameContent ? Intent.DANGER : Intent.NONE}>\n          </Button>\n        </ButtonGroup>\n      </NavbarGroup>\n    </Navbar>\n    <div style={{ overflow: \"auto\" }}>\n      <Editor\n        value={content as string}\n        onValueChange={setContent}\n        highlight={code => highlight(code, languages.html, 'html')}\n        padding={10}\n        style={{\n          backgroundColor: '#2d2d2d',\n          fontFamily: '\"Fira code\", \"Fira Mono\", source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace',\n          fontSize: 12,\n        }}\n      />\n    </div>\n  </div>;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Renderer from './Renderer';\nimport Landing from './Landing';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport './index.css';\n\nconst path = window.location.search;\n\nswitch (path) {\n    case \"?digger\":\n        ReactDOM.render(<Renderer path={path.substr(1)} cycles=\"1000\" autolock={false} />, document.getElementById('root'));\n    break;\n    case \"?arkanoid\":\n        ReactDOM.render(<Renderer path={path.substr(1)} cycles=\"1000\" autolock={true} />, document.getElementById('root'));\n    break;\n    case \"?dhry2\":\n        ReactDOM.render(<Renderer path={path.substr(1)} cycles=\"max\" autolock={false} />, document.getElementById('root'));\n    break;\n\n    default:\n        ReactDOM.render(<Landing />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Button, H1, Card, Elevation, H2, Navbar, NavbarHeading, NavbarGroup } from \"@blueprintjs/core\";\n\nexport default function Landing() {\n    return <div style={{ padding: \"1em\" }}>\n        <Navbar fixedToTop={true}>\n            <NavbarGroup >\n                <NavbarHeading>\n                    <a href=\"https://js-dos.com\">js-dos 6.22</a>\n                </NavbarHeading>\n            </NavbarGroup>\n        </Navbar>\n        <H1 style={{ paddingTop: \"50px\" }}>Examples</H1>\n\n        <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            <Card elevation={Elevation.TWO} style={{ margin: \"1em\" }}>\n                <H2>Digger</H2>\n                <p>\n                    Classic dos game devloped in 1983. Here you can undestand:\n                </p>\n                <ul>\n                    <li>how to run dos game in browser</li>\n                    <li>how to configure dosbox performance</li>\n                </ul>\n                <Button text=\"Run\" onClick={() => window.location.search = \"digger\"}></Button>\n            </Card>\n\n            <Card elevation={Elevation.TWO} style={{ margin: \"1em\" }}>\n                <H2>Arkanoid</H2>\n                <p>Original arcade game released by Tito in 1986. Here you can undestand:\n                </p>\n                <ul>\n                    <li>how to use autolock feature to capture browser mouse</li>\n                    <li>how to enter fullscreen mode</li>\n                </ul>\n                <Button text=\"Run\" onClick={() => window.location.search = \"arkanoid\"}></Button>\n            </Card>\n\n            <Card elevation={Elevation.TWO} style={{ margin: \"1em\" }}>\n                <H2>Dhrystone benchmark</H2>\n                <p>\n                    The Dhrystone \"C\" benchmark provides a measure of integer performance (no floating point instructions).\n                    It became the key standard benchmark from 1984, with the growth of Unix systems.\n                </p>\n                <p>\n                    Here you can examine your PC and find comparable old PC model.\n                </p>\n                <Button text=\"Run\" onClick={() => window.location.search = \"dhry2\"}></Button>\n            </Card>\n        </div>\n    </div>;\n}"],"sourceRoot":""}