{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts","node_modules/assert/assert.js","node_modules/assert/node_modules/inherits/inherits_browser.js","node_modules/assert/node_modules/util/support/isBufferBrowser.js","node_modules/assert/node_modules/util/util.js","node_modules/process/browser.js","test/compare.ts","test/do.ts","test/test.ts"],"names":[],"mappings":"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","file":"test.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22-cc29ba346400bdb29f459d8d502056d1415e9ce4\",\n    wasmSize: 2167540,\n    jsSize:  503536,\n};\n","import { Dos } from \"./js-dos\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n\nexport class DosCommandInteface {\n    public dos: DosModule;\n    private em: typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInteface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInteface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    public exit() {\n        try {\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = (this.em as any).lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                        \"', because it's bigger then max cmd length \" + maxLength);\n                    return;\n                }\n\n                (this.em as any).stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n            default:\n            // do nothing\n        }\n    }\n}\n","import { Dos } from \"./js-dos\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\n// FS\n// ==\n// Api for working with inmemory file system that used by emulation layer\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: typeof Module;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n    }\n\n    // **extract** - downloads url and extract it in cwd (cwd will be mounted as C:),\n    // supported only zip archive\n    public extract(url: string, type: string = \"zip\") {\n        return new Promise<void>((resolve, reject) => {\n            if (type !== \"zip\") {\n                reject(\"Only ZIP archive is supported\");\n                return;\n            }\n\n            new Xhr(url, {\n                responseType: \"arraybuffer\",\n                fail: (msg) => reject(msg),\n                progress: (total, loaded) => this.dos.onprogress(\"Downloading \" + url, total, loaded),\n                success: (data: ArrayBuffer) => {\n                    const bytes = new Uint8Array(data);\n                    const buffer = this.em._malloc(bytes.length);\n                    this.em.HEAPU8.set(bytes, buffer);\n                    const retcode = (this.em as any)._extract_zip(buffer, bytes.length);\n                    this.em._free(buffer);\n\n                    if (retcode === 0) {\n                        resolve();\n                    } else {\n                        reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                    }\n                },\n            });\n        });\n    }\n}\n","import { Build } from \"./js-dos-build\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            // do nothing WebAssembly is not supported\n        }\n\n        this.polyfill();\n    }\n\n    public resolveDosBox(url: string, module: DosModule) {\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (!this.wasmSupported) {\n            module.onerror(\"WebAssembly is not supported, can't resolve wdosbox\");\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            // leave promise scope\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            // leave promise scope\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.onerror(message);\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    private compileDosBox(url: string, module: DosModule) {\n        const buildTotal = Build.wasmSize + Build.jsSize;\n        return new Promise((resolve, reject) => {\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            new Xhr(wasmUrl, {\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox\", buildTotal, loaded);\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, Build.wasmSize + loaded);\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: any) => {\n                                module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n}\n\nexport const Host = new DosHost();\n","import { DosRuntime } from \"./js-dos\";\nimport { DosCommandInteface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosOptions } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement = null;\n    private ci: Promise<DosCommandInteface> = null;\n    private instance: any;\n    private fs: DosFS = null;\n    private ui: DosUi = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n    }\n\n    public debug(message: string) {\n        this.log(\"[DEBUG] \" + message);\n    }\n\n    public info(message: string) {\n        this.log(\"[INFO] \" + message);\n    }\n\n    public warn(message: string) {\n        this.log(\"[WARN] \" + message);\n    }\n\n    public error(message: string) {\n        this.log(\"[ERROR] \" + message);\n    }\n\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n        // emscripten will call this.onRuntimeInitialized\n        // when runtime will ready\n    }\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            this.onerror(\"canvas field is required, but not set!\");\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => this.ui.onprogress(stage, total, loaded);\n        }\n\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    public onRuntimeInitialized() {\n        const mainFn = (args: string[]) => {\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n            args.unshift(\"-c\", \"mount c .\", \"-c\", \"c:\");\n            (this as any).callMain(args);\n            return new Promise<DosCommandInteface>((resolve) => {\n                new DosCommandInteface(this, (ci: DosCommandInteface) => {\n                    resolve(ci);\n                });\n            });\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n}\n","import { DosCommandInteface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\n\n// DosOptions\n// ----------\n// Is a options object that you pass to constructor of [Dos](js-dos.html)\n// class, to configure emulation layer:\nexport class DosOptions {\n\n    // onprogress\n    // ----------\n    // this function is called while js-dos is loading\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n\n    // onerror\n    // -------\n    // this function is called when error happens\n    public onerror?: (message: string) => void;\n\n    // log\n    // ---\n    //  you can provide log function, to override logging, by default js-dos uses console.log as implementation\n    public log?: (message: string) => void;\n\n    // wdosboxUrl\n    // ----------\n    // you can set alternative url for downloading js-dos script, default is 'wdosbox.js'\n    public wdosboxUrl?: string;\n\n}\n","import { DosModule } from \"./js-dos-module\";\n\n// JsDosUi\n// =======\n// Optional ui module to show progress if onprogress is not set by client\n\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement;\n    private loaderMessage: HTMLDivElement;\n    private hidden: boolean;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        try {\n            if (document.getElementById(\"js-dos-ui-css\") === null) {\n                const style = document.createElement(\"style\") as HTMLStyleElement;\n                style.id = \"js-dos-ui-css\";\n                style.innerHTML = this.css;\n                document.head.appendChild(style);\n            }\n\n            if (this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = document.createElement(\"div\") as HTMLDivElement;\n                container.className = \"dosbox-container\";\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = document.createElement(\"div\") as HTMLDivElement;\n                overlay.className = \"dosbox-overlay\";\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = false;\n            this.hide();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        this.loaderMessage.innerHTML = message;\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        this.overlay.setAttribute(\"style\", \"display: none\");\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        this.overlay.setAttribute(\"style\", \"display: block\");\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string) {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child = parent.children[i];\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #f80; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #f80; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #f80; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #f80; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #f80; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #f80; }\n    `;\n\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","interface XhrOptions {\n    method?: string;\n    success?: (response: any) => void;\n    progress?: (total: number, loaded: number) => void;\n    fail?: (url: string, status: number, message: string) => void;\n    data?: string;\n    responseType?: string;\n}\n\nexport class Xhr {\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method, url, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType as XMLHttpRequestResponseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    public onReadyStateChange() {\n        if (this.xhr.readyState === 4) {\n            if (this.xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    this.options.progress(total, total);\n                    return this.options.success(this.xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n    public arrayBufferToString(buffer: ArrayBuffer) {\n        const bufView = new Uint16Array(buffer);\n        const length = bufView.length;\n        let result = \"\";\n        let maxCallSize = Math.pow(2, 16) - 1;\n        let i = 0;\n        while (i < length) {\n            if (i + maxCallSize > length) {\n                maxCallSize = length - i;\n            }\n            result += String.fromCharCode.apply(null, bufView.subarray(i, i + maxCallSize));\n            i += maxCallSize;\n        }\n        return result;\n    }\n\n}\n","\nimport { DosCommandInteface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// Dos\n// ===\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n//\n// **canvas** - is **required**, you should set existing HTMLCanvasElement, it will be used for render dos screen\n// **options** - See [DosOptions](js-dos-options.html) to understand how you can configure Dos class.\nexport function Dos(canvas: HTMLCanvasElement, options: DosOptions) {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n        Object.assign(module, options);\n\n        // Errors\n        // ------\n        // Error propagation should support both ways:\n        // 1. Through reject of promise\n        // 2. Fire onerror function of DosOptions object\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        // See [Host](js-dos-host.html) to understand resolving of emulation layer (dosbox).\n        Host.resolveDosBox(module.wdosboxUrl, module);\n    });\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n    };\n    return dosReadyPromise;\n}\n\n// DosReadyPromise\n// ---------------\n// Is Promise object with additional method ready. It returned by  Dos function\n// when promise is resolved it means that DosBox runtime is ready for use\n// and you can start your program\n\n// DosRuntime\n// ----------\nexport type DosMainFn = (args: string[]) => Promise<DosCommandInteface>;\n\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // ready\n    // -------\n    // This function is called before running entry point of dosbox\n    // with it you can change command line arguments that passed to dosbox\n    // or configure FS layer\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => void;\n}\n\n(window as any).Dos = Dos;\n","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as assert from \"assert\";\nimport { DosCommandInteface } from \"../js-dos-ts/js-dos-ci\";\nimport { doThen } from \"./do\";\n\n// Compare\n// =======\n// Compare image from url, and screenshot from DosBox\n\nexport function compareAndExit(imageUrl: string, ci: DosCommandInteface, done: () => void) {\n    compare(imageUrl, ci, (wrong) => {\n        assert.equal(0, wrong);\n        ci.exit();\n        done();\n    });\n}\n\nconst compare = (imageUrl: string, ci: DosCommandInteface, callback: (wrong: number) => void) => {\n    doThen(ci.screenshot(), (actualUrl: string) => {\n        const img = new Image();\n        img.onload = () => {\n            assert(img.width === ci.width(), \"Invalid width: \" + ci.width() + \", should be \" + img.width);\n            assert(img.height === ci.height(), \"Invalid height: \" + ci.height() + \", should be \" + img.height);\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0);\n            const expected = ctx.getImageData(0, 0, img.width, img.height).data;\n\n            const actualImage = new Image();\n            actualImage.onload = () => {\n                /*\n                document.body.appendChild(img); // for comparisons\n                var div = document.createElement('div');\n                div.innerHTML = '^=expected, v=actual';\n                document.body.appendChild(div);\n                document.body.appendChild(actualImage); // to grab it for creating the test reference\n                */\n\n                const actualCanvas = document.createElement(\"canvas\");\n                actualCanvas.width = actualImage.width;\n                actualCanvas.height = actualImage.height;\n                const actualCtx = actualCanvas.getContext(\"2d\");\n                actualCtx.drawImage(actualImage, 0, 0);\n                const actual = actualCtx.getImageData(0, 0, actualImage.width, actualImage.height).data;\n\n                let total = 0;\n                const width = img.width;\n                const height = img.height;\n                for (let x = 0; x < width; x++) {\n                    for (let y = 0; y < height; y++) {\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 0] - actual[y * width * 4 + x * 4 + 0]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 1] - actual[y * width * 4 + x * 4 + 1]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 2] - actual[y * width * 4 + x * 4 + 2]);\n                    }\n                }\n\n                // floor, to allow some margin of error for antialiasing\n                const wrong = Math.floor(total / (img.width * img.height * 3));\n                callback(wrong);\n            };\n            actualImage.src = actualUrl;\n        };\n        img.src = imageUrl;\n    });\n};\n","import assert = require(\"assert\");\nimport { DosMainFn, DosReadyPromise } from \"../js-dos-ts/js-dos\";\nimport { DosFS } from \"../js-dos-ts/js-dos-fs\";\n\n// Do\n// ==\n// We use this functions to avoid problem of throwing,\n// exceptions inside promise.\n// Mocha can't handle exceptions if they are throwed in promise\n\nexport function doThen<T>(promise: Promise<T>, fn: (v: T) => void) {\n    promise.then((v: T) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doCatch<T>(promise: Promise<T>, fn: (v: string) => void) {\n    promise.catch((v: string) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doNext<T>(promise: Promise<T>, fn: (v: T) => void) {\n    doThen(promise, fn);\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n\nexport function doReady(promise: DosReadyPromise, fn: (fs: DosFS, main: DosMainFn) => void) {\n    doThen(promise, (runtime) => {\n        fn(runtime.fs, runtime.main);\n    });\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n","/* tslint:disable:max-line-length */\n/* tslint:disable:no-console */\n\nimport * as assert from \"assert\";\nimport { Dos } from \"../js-dos-ts/js-dos\";\nimport { DosCommandInteface } from \"../js-dos-ts/js-dos-ci\";\nimport { Host } from \"../js-dos-ts/js-dos-host\";\nimport { DosModule } from \"../js-dos-ts/js-dos-module\";\nimport { DosOptions } from \"../js-dos-ts/js-dos-options\";\nimport { compareAndExit } from \"./compare\";\nimport { doCatch, doNext, doReady, doThen } from \"./do\";\n\nsuite(\"js-dos-host\");\n\ntest(\"loader should notify about error if wasm is not supported\", (done) => {\n    const oldValue = Host.wasmSupported;\n    Host.wasmSupported = false;\n    Host.resolveDosBox(\"wrongurl.js\", {\n        onerror: (message: string) => {\n            Host.wasmSupported = oldValue;\n            assert.equal(\"WebAssembly is not supported, can't resolve wdosbox\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should notify about error, if it can't download wdosbox\", (done) => {\n    Host.resolveDosBox(\"wrongurl.js\", {\n        onerror: (message: string) => {\n            assert.equal(\"Can't download wasm, code: 404, message: connection problem, url: wrongurl.wasm.js\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should show progress loading\", (done) => {\n    let lastLoaded = -1;\n    Host.resolveDosBox(\"/wdosbox.js\", {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            console.log(stage, total, loaded);\n            assert.equal(true, loaded <= total, loaded + \"<=\" + total);\n            assert.equal(true, lastLoaded <= loaded, lastLoaded + \"<=\" + loaded);\n            lastLoaded = loaded;\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should never load twice wdosbox\", (done) => {\n    Host.resolveDosBox(\"/wdosbox.js\", {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should fire event when wdosbox is loaded\", (done) => {\n    Host.resolveDosBox(\"/wdosbox.js\", {\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            assert.ok(dosbox);\n            assert.ok(instantiateWasm);\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\nsuite(\"js-dos\");\n\ntest(\"js-dos can't start without canvas (listener style)\", (done) => {\n    Dos(null, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message: string) => {\n            assert.equal(\"canvas field is required, but not set!\", message);\n            done();\n        },\n    } as DosOptions);\n});\n\ntest(\"js-dos can't start without canvas (promise style)\", (done) => {\n    const dos = Dos(null, {\n        wdosboxUrl: \"/wdosbox.js\",\n    } as DosOptions);\n    doCatch(dos, (message) => {\n        assert.equal(\"canvas field is required, but not set!\", message);\n        done();\n    });\n    doThen(dos, () => {\n        assert.fail();\n    });\n});\n\ntest(\"js-dos should start with canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            ci.exit();\n            done();\n        });\n    });\n});\n\ntest(\"js-dos can take screenshot of canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            compareAndExit(\"init.png\", ci, done);\n        });\n    });\n});\n\ntest(\"js-dos can run digger.zip\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\"), () => {\n            doNext(main([\"DIGGER.COM\"]), (ci) => {\n                const fn = () => {\n                    // compareAndExit(\"digger.png\", ci, done);\n                    saveImage(ci);\n                };\n\n                setTimeout(fn, 5000);\n            });\n        });\n    });\n});\n\nconst saveImage = (ci: DosCommandInteface) => {\n    ci.screenshot().then((data) => {\n        const w = window.open(\"about:blank\", \"image from canvas\");\n        w.document.write(\"<img src='\" + data + \"' alt='from canvas'/>\");\n    });\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}