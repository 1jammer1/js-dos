{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-cache-db.ts","js-dos-ts/js-dos-cache-noop.ts","js-dos-ts/js-dos-cache.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-conf.ts","js-dos-ts/js-dos-dom.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts","node_modules/assert/assert.js","node_modules/assert/node_modules/inherits/inherits_browser.js","node_modules/assert/node_modules/util/support/isBufferBrowser.js","node_modules/assert/node_modules/util/util.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/_advance-string-index.js","node_modules/core-js/modules/_an-instance.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_fails-is-regexp.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_fix-re-wks.js","node_modules/core-js/modules/_flags.js","node_modules/core-js/modules/_for-of.js","node_modules/core-js/modules/_function-to-string.js","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_inherit-if-required.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_math-fround.js","node_modules/core-js/modules/_math-sign.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_microtask.js","node_modules/core-js/modules/_new-promise-capability.js","node_modules/core-js/modules/_object-assign.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_object-sap.js","node_modules/core-js/modules/_perform.js","node_modules/core-js/modules/_promise-resolve.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_redefine-all.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_regexp-exec-abstract.js","node_modules/core-js/modules/_regexp-exec.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_species-constructor.js","node_modules/core-js/modules/_string-at.js","node_modules/core-js/modules/_string-context.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/_to-absolute-index.js","node_modules/core-js/modules/_to-index.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_typed-array.js","node_modules/core-js/modules/_typed-buffer.js","node_modules/core-js/modules/_typed.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_user-agent.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/es6.math.clz32.js","node_modules/core-js/modules/es6.math.fround.js","node_modules/core-js/modules/es6.math.imul.js","node_modules/core-js/modules/es6.math.trunc.js","node_modules/core-js/modules/es6.object.assign.js","node_modules/core-js/modules/es6.object.keys.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/es6.object.to-string.js","node_modules/core-js/modules/es6.promise.js","node_modules/core-js/modules/es6.regexp.constructor.js","node_modules/core-js/modules/es6.regexp.exec.js","node_modules/core-js/modules/es6.regexp.flags.js","node_modules/core-js/modules/es6.regexp.replace.js","node_modules/core-js/modules/es6.regexp.split.js","node_modules/core-js/modules/es6.regexp.to-string.js","node_modules/core-js/modules/es6.string.ends-with.js","node_modules/core-js/modules/es6.string.iterator.js","node_modules/core-js/modules/es6.symbol.js","node_modules/core-js/modules/es6.typed.uint8-array.js","node_modules/core-js/modules/es7.symbol.async-iterator.js","node_modules/core-js/modules/web.dom.iterable.js","node_modules/process/browser.js","test/compare.ts","test/do.ts","test/test.ts"],"names":[],"mappings":"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CAAK,aAAL,CAAmB,MAAM,CAAC,UAA1B,EAAgD,KAAhD,EAAuD,MAAvD;AACH,KAJD;AAMH,GAlDe,CAAhB,CADoE,CAqDxE;AACA;AACA;AACA;;AAEI,MAAM,eAAe,GAAI,OAAzB;;AACA,EAAA,eAAe,CAAC,KAAhB,GAAwB,UAAC,OAAD,EAAQ;AAC5B,IAAA,eAAe,CAAC,IAAhB,CAAqB,UAAC,OAAD,EAAoB;AACrC,MAAA,OAAO,CAAC,OAAO,CAAC,EAAT,EAAa,OAAO,CAAC,IAArB,CAAP;AACH,KAFD;AAGA,WAAO,eAAP;AACH,GALD;;AAMA,SAAO,eAAP;AACH,CAlED;;AAoEA,OAAA,CAAA,OAAA,GAAe,GAAf;AAuBC,MAAc,CAAC,GAAf,GAAqB,GAArB;;;;ACzeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvkBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"test.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22.49 (f4efe5a2c730b31e7cd41b2d74bbf2d1)\",\n    jsVersion: \"e8faff026a9655cb85c16743b92242e4b4f91fab\",\n    wasmJsSize:  189829,\n    wasmVersion: \"85b9fab69e705dd95b902986eba513ed\",\n    wasmSize: 1808684,\n    jsSize:  6646965,\n    buildSeed:  1573749737589,\n};\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheDb implements ICache {\n\n    public version: string;\n    private storeName: string = \"files\";\n    private indexedDB: IDBFactory;\n    private db: IDBDatabase | null = null;\n\n    constructor(version: string, onready: (cache: ICache) => void, onerror: (msg: string) => void) {\n        this.version = version;\n        this.indexedDB = window.indexedDB || (window as any).mozIndexedDB\n            || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n\n        if (!this.indexedDB) {\n            onerror(\"Indexed db is not supported on this host\");\n            return;\n        }\n\n        const openRequest = this.indexedDB.open(\"js-dos-cache (\" + version + \")\", 1);\n        openRequest.onerror = (event) => {\n            onerror(\"Can't open cache database\");\n        };\n        openRequest.onsuccess = (event) => {\n            this.db = openRequest.result;\n            onready(this);\n        };\n        openRequest.onupgradeneeded = (event) => {\n            try {\n                this.db = openRequest.result;\n                this.db.onerror = (event) => {\n                    onerror(\"Can't upgrade cache database\");\n                };\n\n                this.db.createObjectStore(this.storeName);\n            } catch (e) {\n                onerror(\"Can't upgrade cache database\");\n            }\n        };\n    }\n\n    public put(key: string, data: any, onflush: () => void) {\n        if (this.db === null) {\n            onflush();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readwrite\");\n        transaction.oncomplete = () => onflush();\n        transaction.objectStore(this.storeName).put(data, key);\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        if (this.db === null) {\n            onerror(\"db is not initalized\");\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).get(key);\n        request.onerror = () => onerror(\"Can't read value for key '\" + key + \"'\");\n        request.onsuccess = () => {\n            if (request.result) {\n                ondata(request.result);\n            } else {\n                onerror(\"Result is empty for key '\" + key + \"', result: \" + request.result);\n            }\n        };\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        if (this.db === null) {\n            onend();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).openCursor();\n        request.onerror = () => onend();\n        request.onsuccess = (event) => {\n            const cursor = (event.target as any).result as IDBCursorWithValue;\n            if (cursor) {\n                each(cursor.key.toString(), cursor.value);\n                cursor.continue();\n            } else {\n                onend();\n            }\n        };\n    }\n}\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheNoop implements ICache {\n    public put(key: string, data: any, onflush: () => void) {\n        // nothing\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        onerror(\"Cache is not supported on this host\");\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        onend();\n    }\n}\n","import CacheDb from \"./js-dos-cache-db\";\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\n\nexport interface ICache {\n    put: (key: string, data: any, onflush: () => void) => void;\n    get: (key: string, ondata: (data: any) => void, onerror: (msg: string) => void) => void;\n    forEach: (each: (key: string, value: any) => void, onend: () => void) => void;\n}\n\nexport default function openCache(module: DosModule, onready: (cache: ICache) => void) {\n    new CacheDb(module.version, onready, (msg: string) => {\n        if (module.log !== undefined) {\n            module.log(\"ERR! Can't initalize cache, cause: \" + msg);\n        }\n        onready(new CacheNoop());\n    });\n}\n","// # DosCommandInterface\n// Is abstraction that allows you to control runned instance of js-dos\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosCommandInterface {\n    public dos: DosModule;\n    private em: any; // typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInterface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n    private onstdout?: (data: string) => void = undefined;\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInterface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    // * `width()` - return dosbox window width in pixels\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    // * `height()` - return dosbox window height in pixels\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    // * `fullscreen()` - enters fullscreen mode\n    // This function can be called anywhere, but for web security reasons its associated request can only be raised\n    // inside the event handler for a user-generated event (for example a key, mouse or touch press/release).\n    public fullscreen() {\n        this.dos.canvas.requestFullscreen()\n    }\n\n    // * `listenStdout()` - redirect everything that printed by dosbox into\n    // console to passed function\n    public listenStdout(onstdout: (data: string) => void) {\n        this.onstdout = onstdout;\n    }\n\n    // * `shell([cmd1, cmd2, ...])` - executes passed commands\n    // in dosbox shell if it's runned, returns Promise that\n    // resolves when commands sequence is executed\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    // * `screenshot()` - get screnshot of canvas as ImageData\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    // * `exit()` - immediately exit from runtime\n    public exit() {\n        try {\n            this.dos.terminate();\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    // * `simulateKeyEvent(keyCode, pressed)` - allows to simulate key press OR release on js-dos canvas\n    public simulateKeyEvent(keyCode: number, pressed: boolean): void {\n        const name = pressed ? \"keydown\" : \"keyup\";\n        const event = document.createEvent(\"KeyboardEvent\") as any;\n        const getter: any = {\n            get() {\n                return this.keyCodeVal;\n            },\n        };\n\n        // Chromium Hack\n        Object.defineProperty(event, \"keyCode\", getter);\n        Object.defineProperty(event, \"which\", getter);\n        Object.defineProperty(event, \"charCode\", getter);\n\n        event.initKeyboardEvent\n        ? event.initKeyboardEvent(name, true, true, document.defaultView, false, false, false, false, keyCode, keyCode)\n        : event.initKeyEvent(name, true, true, document.defaultView, false, false, false, false, keyCode, 0);\n\n        event.keyCodeVal = keyCode;\n        this.dos.canvas && this.dos.canvas.dispatchEvent(event);\n    }\n\n    // * `simulateKeyPress(keyCode)` - allows to simulate key press AND release on js-dos canvas\n    public simulateKeyPress(keyCode: number): void {\n        this.simulateKeyEvent(keyCode, true);\n        setTimeout(() => this.simulateKeyEvent(keyCode, false), 100);\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"frame\":\n                this.onframe();\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = this.em.lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    if (this.dos.onerror !== undefined) {\n                        this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                            \"', because it's bigger then max cmd length \" + maxLength);\n                    }\n                    return;\n                }\n\n                this.em.stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n                break;\n            case \"write_stdout\":\n                const data: string = args[0];\n                if (this.onstdout) {\n                    this.onstdout(data);\n                }\n                break;\n            default:\n            /* do nothing */\n        }\n    }\n\n    private onframe() {\n        this.dos.tick();\n    }\n\n}\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n","import { DosBoxConfig, DosBoxConfigDefaults } from \"./js-dos-options\";\n\n// # js-dos default config\n// This is default config for dosbox that applies for all runs.\n\n// It's configurable through [options](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nexport default function getJsDosConfig(config: DosBoxConfig): string {\n    let conf = jsdosconf;\n    function update(placeholder: string) {\n        conf = conf.replace(\"%\" + placeholder + \"%\",\n            ((config as any)[placeholder] || (DosBoxConfigDefaults as any)[placeholder]) + \"\");\n    }\n    Object.keys(DosBoxConfigDefaults).forEach((name) => update(name));\n    return conf;\n}\n\n/* tslint:disable:max-line-length */\nconst jsdosconf = `\n# This is the configurationfile for DOSBox 0.74. (Please use the latest version of DOSBox)\n# Lines starting with a # are commentlines and are ignored by DOSBox.\n# They are used to (briefly) document the effect of each option.\n\n[sdl]\n#       fullscreen: Start dosbox directly in fullscreen. (Press ALT-Enter to go back)\n#       fulldouble: Use double buffering in fullscreen. It can reduce screen flickering, but it can also result in a slow DOSBox.\n#   fullresolution: What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).\n#                     Using your monitor's native resolution with aspect=true might give the best results.\n#                     If you end up with small window on a large screen, try an output different from surface.\n# windowresolution: Scale the window to this size IF the output device supports hardware scaling.\n#                     (output=surface does not!)\n#           output: What video system to use for output.\n#                   Possible values: surface, overlay, opengl, openglnb.\n#         autolock: Mouse will automatically lock, if you click on the screen. (Press CTRL-F10 to unlock)\n#      sensitivity: Mouse sensitivity.\n#      waitonerror: Wait before closing the console if dosbox has an error.\n#         priority: Priority levels for dosbox. Second entry behind the comma is for when dosbox is not focused/minimized.\n#                     pause is only valid for the second entry.\n#                   Possible values: lowest, lower, normal, higher, highest, pause.\n#       mapperfile: File used to load/save the key/event mappings from. Resetmapper only works with the defaul value.\n#     usescancodes: Avoid usage of symkeys, might not work on all operating systems.\n\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nautolock=%autolock%\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n\n[dosbox]\n# language: Select another language file.\n#  machine: The type of machine tries to emulate.\n#           Possible values: hercules, cga, tandy, pcjr, ega, vgaonly, svga_s3, svga_et3000, svga_et4000, svga_paradise, vesa_nolfb, vesa_oldvbe.\n# captures: Directory where things like wave, midi, screenshot get captured.\n#  memsize: Amount of memory DOSBox has in megabytes.\n#             This value is best left at its default to avoid problems with some games,\n#             though few games might require a higher value.\n#             There is generally no speed advantage when raising this value.\n\nlanguage=\nmachine=svga_s3\ncaptures=capture\nmemsize=16\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[cpu]\n#      core: CPU Core used in emulation. auto will switch to dynamic if available and appropriate.\n#            Possible values: auto, dynamic, normal, simple.\n#   cputype: CPU Type used in emulation. auto is the fastest choice.\n#            Possible values: auto, 386, 386_slow, 486_slow, pentium_slow, 386_prefetch.\n#    cycles: Amount of instructions DOSBox tries to emulate each millisecond.\n#            Setting this value too high results in sound dropouts and lags.\n#            Cycles can be set in 3 ways:\n#              'auto'          tries to guess what a game needs.\n#                              It usually works, but can fail for certain games.\n#              'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n#                              (Example: fixed 4000).\n#              'max'           will allocate as much cycles as your computer is able to handle.\n#\n#            Possible values: auto, fixed, max.\n#   cycleup: Amount of cycles to decrease/increase with keycombo.(CTRL-F11/CTRL-F12)\n# cycledown: Setting it lower than 100 will be a percentage.\n\ncore=auto\ncputype=auto\ncycles=%cycles%\ncycleup=10\ncycledown=20\n\n[mixer]\n#   nosound: Enable silent mode, sound is still emulated though.\n#      rate: Mixer sample rate, setting any device's rate higher than this will probably lower their sound quality.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n# blocksize: Mixer block size, larger blocks might help sound stuttering but sound will also be more lagged.\n#            Possible values: 1024, 2048, 4096, 8192, 512, 256.\n# prebuffer: How many milliseconds of data to keep on top of the blocksize.\n\nnosound=false\nrate=44100\nblocksize=1024\nprebuffer=20\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n\n[autoexec]\n# Lines in this section will be run at startup.\n# You can put your MOUNT lines here.\n\n# https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█ \n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n`;\n","// # DosDom\n// Simple API to work with DOM\n\n// ### applyCss - add new css style if no html element with id exists\nexport function applyCss(id: string, css: string) {\n    if (document.getElementById(id) === null) {\n        const style = document.createElement(\"style\") as HTMLStyleElement;\n        style.id = id;\n        style.innerHTML = css;\n        document.head.appendChild(style);\n    }\n}\n\n// ### createDiv - typesafe shortcut for creating HTMLDivElement\nexport function createDiv(className?: string): HTMLDivElement {\n    const el = document.createElement(\"div\") as HTMLDivElement;\n    if (className !== undefined) {\n        el.className = className;\n    }\n    return el;\n}\n","// # DosFS\n// API for working with file system of dosbox\n\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport interface DosArchiveSource {\n    // **url** where archive is located\n    url: string;\n\n    // **mountPoint**\n    mountPoint: string;\n    // is a path to mount archive contents. There are two types of mountPoints:\n    // * path '/' which is a MEMFS that is live only in one ssesion.\n    // It means that after restart all progress will be erased.\n    //\n    // * any other path (e.g. '/game'). This path will be stored across sessions in indexed db. It means\n    // that progress will be there after browser restart.\n    //\n    // In other words, you can use path '/' to store temporal data, but others use to store\n    // content that need to be persisten.\n    // **NOTE**: because content of folder is stored in indexed db original archive is downloaded\n    // and extracted only once to avoid rewriting stored content! And you can't store different\n    // content (from different archives) into one path.\n\n    // **type** currently we support only zip archives\n    type?: \"zip\";\n}\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: any; // typeof Module;\n    private fs: any;\n    private syncingPromise: Promise<void> | null = null;\n    private lastSyncTime = 0;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n        this.fs = (dos as any).FS;\n\n        // Sync fs to indexed db periodically\n        this.dos.registerTickListener(() => {\n            if (Date.now() - this.lastSyncTime < 5000) {\n                return;\n            }\n            this.lastSyncTime = Date.now();\n            this.syncFs();\n        });\n        this.dos.registerPauseListener(() => this.syncFs());\n        this.dos.registerTerminateListener(() => this.syncFs());\n    }\n\n    public chdir(path: string) {\n        this.fs.chdir(path);\n    }\n\n    // ### extract\n    public extract(url: string, mountPoint: string = \"/\", type: \"zip\" = \"zip\"): Promise<void> {\n        // simplified version of extractAll, works only for one archive. It calls extractAll inside.\n        return this.extractAll([{ url, mountPoint, type }]);\n    }\n\n    // ### extract\n    public extractAll(sources: DosArchiveSource[]): Promise<void> {\n        // download given archives and extract them to mountPoint's\n        // this method will return `Promise<void>`, that will be resolved\n        // on success with empty object or rejected\n        const extractArchiveInCwd = (url: string, path: string, type: \"zip\") => {\n            return new Promise<void>((resolve, reject) => {\n                if (type !== \"zip\") {\n                    reject(\"Only ZIP archive is supported\");\n                    return;\n                }\n\n                new Xhr(url, {\n                    cache: new CacheNoop(),\n                    responseType: \"arraybuffer\",\n                    fail: (msg) => reject(msg),\n                    progress: (total, loaded) => {\n                        if (this.dos.onprogress !== undefined) {\n                            this.dos.onprogress(\"Downloading \" + url, total, loaded);\n                        }\n                    },\n                    success: (data: ArrayBuffer) => {\n                        this.chdir(path);\n\n                        const bytes = new Uint8Array(data);\n                        const buffer = this.em._malloc(bytes.length);\n                        this.em.HEAPU8.set(bytes, buffer);\n                        const retcode = this.em._extract_zip(buffer, bytes.length);\n                        this.em._free(buffer);\n\n                        if (retcode === 0) {\n                            this.writeOk(path);\n                            resolve();\n                        } else {\n                            reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                        }\n                    },\n                });\n            });\n        };\n\n        const prepareMountFunction = (source: DosArchiveSource) => {\n            const mountPoint = this.normalizePath(source.mountPoint);\n            const type = source.type || \"zip\";\n            const isRoot = mountPoint === \"/\" || mountPoint.length === 0;\n\n            const parts = mountPoint.split(\"/\");\n            this.createPath(parts, 0, parts.length);\n\n            const mountFn = () => {\n                if (isRoot || !this.readOk(mountPoint)) {\n                    if (!isRoot) {\n                        this.dos.warn(\"Indexed db does not contains '\" + mountPoint + \"' rewriting...\");\n                    }\n                    return extractArchiveInCwd(source.url, mountPoint, type);\n                }\n                return Promise.resolve();\n            };\n\n            if (!isRoot) {\n                this.fs.mount(this.fs.filesystems.IDBFS, {}, mountPoint);\n            }\n\n            return mountFn;\n        };\n\n        return new Promise<void>((resolve, reject) => {\n            if (this.lastSyncTime > 0) {\n                reject(\"Can't create persistent mount point, after syncing process starts\");\n                return;\n            }\n\n            const mountFunctions: Array<() => Promise<void>> = [];\n            for (const source of sources) {\n                mountFunctions.push(prepareMountFunction(source));\n            }\n\n            this.fs.syncfs(true, (err: any) => {\n                if (err) {\n                    this.dos.error(\"Can't restore FS from indexed db, cause: \" + err);\n                }\n\n                const promises: Array<Promise<void>> = [];\n                for (const mountFn of mountFunctions) {\n                    promises.push(mountFn());\n                }\n\n                Promise.all(promises)\n                    .then(() => {\n                        this.syncFs().then(resolve).catch(reject);\n                    })\n                    .catch(reject);\n            });\n        });\n    }\n\n    // ### createFile\n    public createFile(file: string, body: ArrayBuffer | Uint8Array | string) {\n        // [synchronous] allow to create file in FS, you can pass absolute path.\n        // All directories will be created\n        //\n        // body can be string or ArrayBuffer or Uint8Array\n\n        if (body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n\n        // windows style path are also valid, but **drive letter is ignored**\n        // if you pass only filename, then file will be writed in root \"/\" directory\n        file = file.replace(new RegExp(\"^[a-zA-z]+:\"), \"\").replace(new RegExp(\"\\\\\\\\\", \"g\"), \"/\");\n        const parts = file.split(\"/\");\n\n        if (parts.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because it's not valid file path\");\n            }\n            return;\n        }\n\n        const filename = parts[parts.length - 1].trim();\n\n        if (filename.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because file name is empty\");\n            }\n            return;\n        }\n\n        /* i < parts.length - 1, because last part is file name */\n        const path = this.createPath(parts, 0, parts.length - 1);\n        this.fs.createDataFile(path, filename, body, true, true, true);\n    }\n\n    private createPath(parts: string[], begin: number, end: number) {\n        let path = \"\";\n        for (let i = begin; i < end; ++i) {\n            const part = parts[i].trim();\n            if (part.length === 0) {\n                continue;\n            }\n\n            this.fs.createPath(path, part, true, true);\n            path = path + \"/\" + part;\n        }\n\n        return path;\n    }\n\n    private syncFs() {\n        if (this.syncingPromise) {\n            return this.syncingPromise;\n        }\n\n        this.syncingPromise = new Promise<void>((resolve, reject) => {\n            const startedAt = Date.now();\n            this.fs.syncfs(false, (err: any) => {\n                if (err) {\n                    this.dos.error(\"Can't sync FS to indexed db, cause: \" + err);\n                    reject(err);\n                }\n                this.syncingPromise = null;\n                this.lastSyncTime = Date.now();\n                resolve();\n            });\n        });\n\n        return this.syncingPromise;\n    }\n\n    private normalizePath(path: string) {\n        if (path.length === 0 || path[0] !== \"/\") {\n            path = \"/\" + path;\n        }\n\n        if (path.length > 1 && path.endsWith(\"/\")) {\n            path = path.substr(0, path.length - 1);\n        }\n\n        return path;\n    }\n\n    private readOk(path: string) {\n        try {\n            const readed = this.fs.readFile(path + \"/state.fs\");\n            return readed[0] === 79 && readed[1] === 70;\n        } catch {\n            return false;\n        }\n    }\n\n    private writeOk(path: string) {\n        this.createFile(path + \"/state.fs\", new Uint8Array([79, 70])); // Ok\n    }\n\n}\n","// # DosHost\n// This class is used to detect and provide information about\n// features that supported in current environment\n\n/* tslint:disable:member-ordering */\nimport { Build } from \"./js-dos-build\";\nimport { ICache } from \"./js-dos-cache\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> | null = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        // ### WebAssembly\n        // Host able to detect is WebAssembly supported or not,\n        // this information is stored in `Host.wasmSupported` variable\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            /* do nothing WebAssembly is not supported */\n        }\n\n        // ### polyfill\n        // Host also provides limited set of polyfills to support legacy browsers\n        this.polyfill();\n    }\n\n    // Currently polyfill contains implementations for:\n    // `Math.imul`, `Math.fround`, `Math.clz32`, `Math.trunc`\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n\n    // ### resolveDosBox\n    // `resolveDosBox` is another important task of DosHost\n    public resolveDosBox(url: string, cache: ICache, module: DosModule) {\n        // When dosbox is resolved, WDOSBOX module is set to\n        // global variable `exports.WDOSBOX`. This variable is\n        // used to prevent next loads of same dosbox module.\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, cache, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                if (module.onerror !== undefined) {\n                    module.onerror(message);\n                }\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    // If dosbox is not yet resolved, then:\n    private compileDosBox(url: string, cache: ICache, module: DosModule) {\n        const fromIndex = url.lastIndexOf(\"/\");\n        const wIndex = url.indexOf(\"w\", fromIndex);\n        const isWasmUrl = wIndex === fromIndex + 1 && wIndex >= 0;\n\n        if (this.wasmSupported && isWasmUrl) {\n            return this.compileWasmDosBox(url, cache, module);\n        } else {\n            if (module.log) {\n                module.log(\"[WARN] Using js version of dosbox, perfomance can be lower then expected\");\n                module.log(\"[DEBUG] Wasm supported: \" + this.wasmSupported + \", url: \" + url);\n            }\n\n            // fallback to js version if wasm not supported\n            if (isWasmUrl) {\n                url = url.substr(0, wIndex) + url.substr(wIndex + 1);\n            }\n            return this.compileJsDosBox(url, cache, module);\n        }\n    }\n\n    private compileJsDosBox(url: string, cache: ICache, module: DosModule): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const buildTotal = Build.jsSize;\n            const memUrl = url.replace(\".js\", \".js.mem\");\n\n            // * Host download `dosbox.js`\n            new Xhr(url, {\n                cache,\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox (\" + url + \")\", buildTotal,\n                        Math.min(buildTotal, loaded));\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download dosbox.js, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: string) => {\n                    if (module.onprogress !== undefined) {\n                        module.onprogress(\"Resolving DosBox (\" + url + \")\", buildTotal, buildTotal);\n                    }\n\n                    response +=\n                        /* tslint:disable:no-eval */\n                        eval.call(this, response);\n                        /* tslint:enable:no-eval */\n\n                    resolve(this.global.exports.WDOSBOX);\n                },\n            });\n        });\n    }\n\n    private compileWasmDosBox(url: string, cache: ICache, module: DosModule): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const buildTotal = Build.wasmSize + Build.wasmJsSize;\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            // * Host downloads `wdosbox` asm + js scripts\n            new Xhr(wasmUrl, {\n                cache,\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox (\" + url + \")\",\n                            buildTotal, Math.min(Build.wasmSize, loaded));\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    // * Compile dosbox wasm module\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            info.env.globalscall = (...args: any[]) => {\n                                if (module.onglobals) {\n                                    module.onglobals.apply(null, args);\n                                }\n                            };\n                            // *  Instaniate it for each new dosbox runtime\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            cache,\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal,\n                                        Math.min(buildTotal, Build.wasmSize + loaded));\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: string) => {\n                                if (module.onprogress !== undefined) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n                                }\n\n                                response +=\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                /* tslint:enable:no-eval */\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n}\n\nexport const Host = new DosHost();\n","// # DosModule\n// DosModule is [emscripten module object](https://kripken.github.io/emscripten-site/docs/api_reference/module.html),\n// with additional functionality\nimport Dos, { DosRuntime } from \"./js-dos\";\nimport { Build } from \"./js-dos-build\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport getJsDosConfig from \"./js-dos-conf\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosOptions } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement;\n    public version = Build.version;\n    public onglobals?: (...args: any[]) => void;\n    public ci: Promise<DosCommandInterface>;\n\n    private instance: any;\n    private fs: DosFS | null = null;\n    private ui: DosUi | null = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    private tickListeners: Array< () => void > = [];\n    private pauseListeners: Array< () => void > = [];\n    private resumeListeners: Array< () => void > = [];\n    private terminateListeners: Array< () => void > = [];\n\n    private ciResolveFn: (ci: DosCommandInterface) => void = () => {};\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n        this.ci = new Promise<DosCommandInterface>((resolve) => {\n            this.ciResolveFn = resolve;\n        });\n\n        this.registerDefaultListeners();\n    }\n\n    private registerDefaultListeners() {\n        let hidden: string;\n        let visibilityChange: string;\n\n        if (typeof document.hidden !== \"undefined\") {\n            hidden = \"hidden\";\n            visibilityChange = \"visibilitychange\";\n        } else if (typeof (document as any).mozHidden !== \"undefined\") {\n            hidden = \"mozHidden\";\n            visibilityChange = \"mozvisibilitychange\";\n        } else if (typeof (document as any).msHidden !== \"undefined\") {\n            hidden = \"msHidden\";\n            visibilityChange = \"msvisibilitychange\";\n        } else if (typeof (document as any).webkitHidden !== \"undefined\") {\n            hidden = \"webkitHidden\";\n            visibilityChange = \"webkitvisibilitychange\";\n        }\n\n        document.addEventListener(\"visibilityChange\", () => {\n            (document as any)[hidden] ? this.pause() : this.resume();\n        }, false);\n\n        window.addEventListener(\"beforeunload\", () => {\n           this.terminate();\n        });\n    }\n\n    // ### logging\n    // DosModule implements simply logging features:\n    // `debug`, `info`, `warn`, `error` methods\n    public debug(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[DEBUG] \" + message);\n        }\n    }\n\n    public info(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[INFO] \" + message);\n        }\n    }\n\n    public warn(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[WARN] \" + message);\n        }\n    }\n\n    public error(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[ERROR] \" + message);\n        }\n    }\n\n    // ### ondosbox\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n    }\n\n    // Method `ondosbox` is called when\n    // [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host) is resolved.\n    // This method instaniate wasm dosbox module with `this` as emscripten\n    // module object. It means that emscripten will call\n    // `this.onRuntimeInitialized` when runtime will be ready\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            if (this.onerror !== undefined) {\n                this.onerror(\"canvas field is required, but not set!\");\n            }\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => {\n                if (this.ui !== null) {\n                    this.ui.onprogress(stage, total, loaded);\n                }\n            };\n        }\n\n        // ### sdl defaults\n        // DosModule overrides defaults for emscripten SDL wrapper\n        // for maximum performance\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    // ### onRuntimeInitialized\n    public onRuntimeInitialized() {\n        const mainFn = (args?: string[]) => {\n            // When emscripten runtime is initialized and main\n            // function is called:\n            //\n            // * DosModule detach [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui)\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n\n            if (!args) {\n                args = [];\n            }\n\n            if (this.fs === null) {\n                return new Promise<DosCommandInterface>((resolve, reject) => {\n                    reject(\"IllegalState: fs is null\");\n                });\n            }\n\n            this.fs.chdir(\"/\");\n\n            // * Write default [dosbox.conf](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-conf)\n            // file to user directory\n            this.fs.createFile(\"/home/web_user/.dosbox/dosbox-jsdos.conf\", getJsDosConfig(this));\n            // * Mount emscripten FS as drive c:\n            args.unshift(\"-userconf\", \"-c\", \"mount c .\", \"-c\", \"c:\");\n            // [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci)\n            new DosCommandInterface(this, (ci: DosCommandInterface) => {\n                this.ciResolveFn(ci);\n            });\n            // * Run dosbox with passed arguments and resolve\n            (this as any).callMain(args);\n            return this.ci;\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n    // ### registerTickListener\n    // registred tick listener it will be called each frame\n    public registerTickListener(listener: () => void) {\n        this.tickListeners.push(listener);\n    }\n\n    // ### registerPauseListener\n    // registred tick listener it will be called each frame\n    public registerPauseListener(listener: () => void) {\n        this.pauseListeners.push(listener);\n    }\n\n    // ### registerResumeListener\n    // registred tick listener it will be called each frame\n    public registerResumeListener(listener: () => void) {\n        this.resumeListeners.push(listener);\n    }\n\n    // ### registerTerminateListener\n    // registred tick listener it will be called each frame\n    public registerTerminateListener(listener: () => void) {\n        this.terminateListeners.push(listener);\n    }\n\n    // ### tick\n    // tick is called internally each frame, no need to call\n    // it manually\n    public tick() {\n        for (const l of this.tickListeners) {\n            l();\n        }\n    }\n\n    // ### pause\n    // pause is called when dosbox tab became inactive\n    public pause() {\n        for (const l of this.pauseListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // resume is called when dosbox tab became active\n    public resume() {\n        for (const l of this.resumeListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // terminate is called when dosbox tab is closed\n    public terminate() {\n        for (const l of this.terminateListeners) {\n            l();\n        }\n    }\n\n}\n","// # DosOptions\n// Is a options object that you pass to constructor of\n// [Dos](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos)\n// class, to configure emulation layer\n\nexport class DosBoxConfig {\n// ### cycles\n    public cycles?: number | string;\n//    Amount of instructions DOSBox tries to emulate each millisecond.\n//    Setting this value too high results in sound dropouts and lags.\n//\n//    Cycles can be set in 3 ways:\n//\n//    * `auto` - tries to guess what a game needs. It usually works, but can fail for certain games.\n//    * `fixed #number` - will set a fixed amount of cycles. This is what you \n// usually need if 'auto' fails. (Example: fixed 4000).\n//    * `max` - will allocate as much cycles as your computer is able to handle.\n//\n\n// ### autolock\n    public autolock?: boolean;\n//    Mouse will automatically lock, if you click on the screen. (Press CTRL-F10 to unlock)\n//\n//    By default dosbox mouse will follow browser cursor without locking.\n//    It means that js-dos will not take exclusive control over mouse pointer.\n//    However you can change this behaviour by providing `autolock=true` in\n//    `dosbox.conf` or throug h [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options).\n//    Then js-dos will take exclusive control and lock mouse inside js-dos container (you can't leave it).\n//    This will happen after first click, and you can unlock mouse by pressing `CTRL+F10` or `ESC`.\n//\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class DosOptions extends DosBoxConfig {\n\n    // ### onprogress\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n    // progress event listener, it is fired when loading progress is changed\n    // if this function is not set, then\n    // [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui) will be used\n    // to show progress\n    //\n    // * `stage` - current loading stage\n    // * `total` - total bytes to download on current stage\n    // * `loaded` - downloaded bytes\n\n    // ### onerror\n    public onerror?: (message: string) => void;\n    // this function is called when error happens\n    //\n    // * `message` - infomation about error\n\n    // ### log\n    public log?: (message: string) => void;\n    // you can provide log function, to override logging, by default js-dos uses console.log as implementation\n\n    // ### wdosboxUrl\n    public wdosboxUrl?: string;\n    // you can set alternative url for downloading js-dos script, default is `wdosbox.js`.\n    // Additionaly you can change which variant of js-dos script to use:\n    //\n    // * `wdosbox.js` - default variant. This version compiled with latest emscripten and in theory should work best\n    // * `wdosbox-emterp.js` - This version compiled with legacy fastcomp backend, can be useful in rare cases\n    // (e.g. if you have problems with default version)\n    // * `wdosbox-nosync.js` - Fastest possible version, but limited. You can't run console programs/shell\n    // emulation using it\n    // * `dosbox.js` - same as dosbox-emterp.js because default version can't be compiled to asm.js\n    // * `dosbox-emterp.js` - same as wdosbox-emterp.js but javascript (asm.js)\n    // * `dosbox-nosync.js` - same as wdosbox-nosync.js but javascript (asm.js)\n    //\n    // Also you can choose from profiling version of implementation: `wdosbox-profiling.js`,\n    // `wdosbox-emterp-profiling.js`, `wdosbox-nosync-profiling.js`\n    //\n    // Take in account even if you use wasm version of dosbox it will be automatically fallbacked\n    // to javascript version if wasm can't start.\n    //\n    // Default version have limitation and can't be compiled to asm.js, dosbox-emterp.js will be used as fallback\n    // for wdosbox.js\n}\n\nexport const DosBoxConfigDefaults: DosBoxConfig = {\n    cycles: \"max\",\n    autolock: false,\n};\n","// # JsDosUi\n// Optional ui module for js-dos.\n// This ui will be applied if client did not set `onprogress` in\n// [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nimport * as DosDom from \"./js-dos-dom\";\nimport { DosModule } from \"./js-dos-module\";\n\nconst maxStageLength = 32;\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement | null = null;\n    private loaderMessage: HTMLDivElement | null = null;\n    private hidden: boolean = true;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        // ### How it works\n        // This ui replace canvas element with div .dosbox-container,\n        // that contains original canvas and .dosbox-overlay as children\n        // You can change style of ui by editing css for this two classes\n\n        try {\n            DosDom.applyCss(\"js-dos-ui-css\", this.css);\n\n            if (this.canvas.parentElement !== null && this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = DosDom.createDiv(\"dosbox-container\");\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = DosDom.createDiv(\"dosbox-overlay\");\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            if (container === null) {\n                throw new Error(\"Illegal state, container is null\");\n            }\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            if (this.overlay === null) {\n                throw new Error(\"Illegal state, overlay is null\");\n            }\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = true;\n            this.show();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        if (stage.length > maxStageLength) {\n            stage = \"…\" + stage.substr(-maxStageLength);\n        }\n\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        if (this.loaderMessage !== null) {\n            this.loaderMessage.innerHTML = message;\n        }\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: none\");\n        }\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: block\");\n        }\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string): HTMLDivElement | null {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child: HTMLElement | null = parent.children[i] as HTMLElement;\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    // ### Style\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #fff; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #fff; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #fff; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #fff; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #fff; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #fff; }\n    `;\n\n    // ### Template\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","import { ICache } from \"./js-dos-cache\";\nimport CacheNoop from \"./js-dos-cache-noop\";\n\n// # Xhr\n// `Xhr` is small wrapper over XMLHttpRequest, that provides some\n// handy methods\n\n// You can configre Xhr with XhrOptions object:\ninterface XhrOptions {\n    cache: ICache;\n    method?: string;\n    success?: (response: any) => void;\n    progress?: (total: number, loaded: number) => void;\n    fail?: (url: string, status: number, message: string) => void;\n    data?: string;\n    responseType?: XMLHttpRequestResponseType;\n}\n// * `method` - \"GET\" | \"POST\"\n// * `success` - callback when resource is downloaded\n// * `progress` - callback for progress\n// * `fail` - fail callback\n// * `data` - data for POST request, should typeof `application/x-www-form-urlencoded`\n// * `responseType` - XMLHttpRequestResponseType\n\n// Class Xhr does not have any public methods\nexport class Xhr {\n    private cache: ICache;\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest | null = null;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.cache = options.cache || new CacheNoop();\n\n        if (this.options.method  === \"GET\") {\n            this.cache.get(this.resource, (data) => {\n                if (this.options.success !== undefined) {\n                    this.options.success(data);\n                }\n            }, () => {\n                this.makeHttpRequest();\n            });\n        }\n    }\n\n    private makeHttpRequest() {\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method || \"GET\", this.resource, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, (this.xhr as XMLHttpRequest).status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    private onReadyStateChange() {\n        const xhr = (this.xhr as XMLHttpRequest);\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    if (this.options.progress !== undefined) {\n                        this.options.progress(total, total);\n                    }\n\n                    if (this.options.method === \"GET\" && this.resource.indexOf(\"?\") < 0) {\n                        this.cache.put(this.resource, xhr.response, () => { /**/ });\n                    }\n\n                    return this.options.success(xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n}\n","\n// # Example\n// ```javascript\n// Dos(canvas).ready((fs, main) => {\n//     fs.extract(\"digger.zip\").then(() => {\n//         main([\"-c\", \"DIGGER.COM\"])\n//     });\n// });\n// ```\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n\n// # Dos\n\nimport openCache from \"./js-dos-cache\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// When you call `Dos(canvas, options)` js-dos behind the scene will download\n// dosbox and prepare it to start. This function will return `Promise<DosReadyPromise>`\n// that will be resolved when dosbox is ready. In case of error promise\n// will be rejected.\n//\n// * `canvas`: HTMLCanvasElement - this canvas element is used as window for dosbox\n// * `options`: [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options) -\n// optional configuration object\nexport type DosFactory = (canvas: HTMLCanvasElement, options?: DosOptions) => DosReadyPromise;\nconst Dos: DosFactory = (canvas: HTMLCanvasElement, options?: DosOptions) => {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n\n        if (!options) {\n            options = {};\n        }\n\n        if (!options.onerror) {\n            options.onerror = (message: string) => {\n                /* tslint:disable:no-console */\n                console.error(message);\n                /* tslint:enable:no-console */\n            };\n        }\n\n        Object.assign(module, options);\n\n        // ### Error handling\n        // Error handling should support both ways:\n        //\n        // * Through rejecting of promise\n        // * Fire onerror function of DosOptions object\n\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        openCache(module, (cache) => {\n            // See [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host)\n            // to understand resolving of emulation layer (dosbox).\n            Host.resolveDosBox(module.wdosboxUrl as string, cache, module);\n        });\n\n    });\n\n// ### DosReadyPromise\n// Is a Promise object with additional method ready.\n// Method `ready` is just a wrapper over `then` method that\n// split resolved object into meaningful parts.\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n        return dosReadyPromise;\n    };\n    return dosReadyPromise;\n};\n\nexport default Dos;\n\nexport type DosMainFn = (args?: string[]) => Promise<DosCommandInterface>;\n\n// Plain promise will be resolved with `DosRuntime` interface, that\n// includes:\n//\n// * `fs`: [DosFS](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-fs) -\n// API for working with dosbox filesystem\n// * `main`: DosMainFn - a function that you should call to actuall start\n// dosbox. It's like a main function in C++, or shell command line. This function\n// will return Promise of [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci).\n// You can use it to control runned dosbox.\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // `onready` - callback that receive DosRuntime splitted by fields\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => Promise<DosRuntime>;\n}\n\n(window as any).Dos = Dos;\n","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var core = module.exports = { version: '2.6.10' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toObject = require('./_to-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $GOPS = require('./_object-gops');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_wks-define')('asyncIterator');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as assert from \"assert\";\nimport { DosCommandInterface } from \"../js-dos-ts/js-dos-ci\";\nimport { doThen } from \"./do\";\n\n// Compare\n// =======\n// Compare image from url, and screenshot from DosBox\n\nexport function compareAndExit(imageUrl: string, ci: DosCommandInterface, done: () => void) {\n    compare(imageUrl, ci, (wrong) => {\n        assert.equal(0, wrong);\n        ci.exit();\n        done();\n    });\n}\n\nconst compare = (imageUrl: string, ci: DosCommandInterface, callback: (wrong: number) => void) => {\n    doThen(ci.screenshot(), (actualUrl: string) => {\n        const img = new Image();\n        img.onload = () => {\n            assert(img.width === ci.width(), \"Invalid width: \" + ci.width() + \", should be \" + img.width);\n            assert(img.height === ci.height(), \"Invalid height: \" + ci.height() + \", should be \" + img.height);\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0);\n            const expected = ctx.getImageData(0, 0, img.width, img.height).data;\n\n            const actualImage = new Image();\n            actualImage.onload = () => {\n                /*\n                document.body.appendChild(img); // for comparisons\n                var div = document.createElement('div');\n                div.innerHTML = '^=expected, v=actual';\n                document.body.appendChild(div);\n                document.body.appendChild(actualImage); // to grab it for creating the test reference\n                */\n\n                const actualCanvas = document.createElement(\"canvas\");\n                actualCanvas.width = actualImage.width;\n                actualCanvas.height = actualImage.height;\n                const actualCtx = actualCanvas.getContext(\"2d\");\n                actualCtx.drawImage(actualImage, 0, 0);\n                const actual = actualCtx.getImageData(0, 0, actualImage.width, actualImage.height).data;\n\n                let total = 0;\n                const width = img.width;\n                const height = img.height;\n                for (let x = 0; x < width; x++) {\n                    for (let y = 0; y < height; y++) {\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 0] - actual[y * width * 4 + x * 4 + 0]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 1] - actual[y * width * 4 + x * 4 + 1]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 2] - actual[y * width * 4 + x * 4 + 2]);\n                    }\n                }\n\n                // floor, to allow some margin of error for antialiasing\n                const wrong = Math.floor(total / (img.width * img.height * 3));\n                callback(wrong);\n            };\n            actualImage.src = actualUrl;\n        };\n        img.src = imageUrl;\n    });\n};\n","import assert = require(\"assert\");\nimport { DosMainFn, DosReadyPromise } from \"../js-dos-ts/js-dos\";\nimport { DosFS } from \"../js-dos-ts/js-dos-fs\";\n\n// Do\n// ==\n// We use this functions to avoid problem of throwing,\n// exceptions inside promise.\n// Mocha can't handle exceptions if they are throwed in promise\n\nexport function doThen<T>(promise: Promise<T>, fn: (v: T) => void) {\n    promise.then((v: T) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doCatch<T>(promise: Promise<T>, fn: (v: string) => void) {\n    promise.catch((v: string) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doNext<T>(promise: Promise<T>, fn: (v: T) => void) {\n    doThen(promise, fn);\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n\nexport function doReady(promise: DosReadyPromise, fn: (fs: DosFS, main: DosMainFn) => void) {\n    doThen(promise, (runtime) => {\n        fn(runtime.fs, runtime.main);\n    });\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n","/* tslint:disable:max-line-length */\n/* tslint:disable:no-console */\n\nimport * as assert from \"assert\";\nimport Dos from \"../js-dos-ts/js-dos\";\nimport { ICache } from \"../js-dos-ts/js-dos-cache\";\nimport CacheDb from \"../js-dos-ts/js-dos-cache-db\";\nimport CacheNoop from \"../js-dos-ts/js-dos-cache-noop\";\nimport { DosCommandInterface } from \"../js-dos-ts/js-dos-ci\";\nimport { Host } from \"../js-dos-ts/js-dos-host\";\nimport { DosModule } from \"../js-dos-ts/js-dos-module\";\nimport { DosOptions } from \"../js-dos-ts/js-dos-options\";\nimport { compareAndExit } from \"./compare\";\nimport { doCatch, doNext, doReady, doThen } from \"./do\";\n\nconst wdosboxUrl: string = (window as any).wdosboxUrl;\nsuite(\"js-dos-host\");\n\ntest(\"loader should fallback to js if wasm is not supported\", (done) => {\n    const oldValue = Host.wasmSupported;\n    Host.wasmSupported = false;\n    Host.resolveDosBox(\"wrongurl.js\", new CacheNoop(), {\n        onerror: (message: string) => {\n            Host.wasmSupported = oldValue;\n            assert.equal(\"Can\\'t download dosbox.js, code: 404, message: connection problem, url: rongurl.js\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should notify about error, if it can't download wdosbox\", (done) => {\n    Host.resolveDosBox(\"wrongurl.js\", new CacheNoop(), {\n        onerror: (message: string) => {\n            assert.equal(\"Can't download wasm, code: 404, message: connection problem, url: wrongurl.wasm.js\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should show progress loading and use cache\", (done) => {\n    let isGET = false;\n    let isPUT = false;\n    class TestCache implements ICache {\n        public put(key: string, data: any, onflush: () => void) {\n            isPUT = isPUT || (key === wdosboxUrl.replace(\".js\", \".wasm.js\") && data instanceof ArrayBuffer && (data as ArrayBuffer).byteLength > 0);\n            onflush();\n        }\n\n        public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n            isGET = isGET || key === wdosboxUrl.replace(\".js\", \".wasm.js\");\n            onerror(\"not in cache\");\n        }\n\n        public forEach(each: (key: string, value: any) => void, onend: () => void) {\n            onend();\n        }\n    }\n\n    let lastLoaded = -1;\n    Host.resolveDosBox(wdosboxUrl, new TestCache(), {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            console.log(stage, total, loaded);\n            assert.equal(true, loaded <= total, \"onprgoress: \" + loaded + \"<=\" + total);\n            assert.equal(true, lastLoaded <= loaded, \"endprogress: \" + lastLoaded + \"<=\" + loaded);\n            lastLoaded = loaded;\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            assert.ok(isGET);\n            assert.ok(isPUT);\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should never load twice wdosbox\", (done) => {\n    Host.resolveDosBox(wdosboxUrl, new CacheNoop(), {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should fire event when wdosbox is loaded\", (done) => {\n    Host.resolveDosBox(wdosboxUrl, new CacheNoop(), {\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            assert.ok(dosbox);\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\nsuite(\"js-dos\");\n\ntest(\"js-dos can't start without canvas (listener style)\", (done) => {\n    Dos(null, {\n        wdosboxUrl,\n        onerror: (message: string) => {\n            assert.equal(\"canvas field is required, but not set!\", message);\n            done();\n        },\n    } as DosOptions);\n});\n\ntest(\"js-dos can't start without canvas (promise style)\", (done) => {\n    const dos = Dos(null, {\n        wdosboxUrl,\n    } as DosOptions);\n    doCatch(dos, (message) => {\n        assert.equal(\"canvas field is required, but not set!\", message);\n        done();\n    });\n    doThen(dos, () => {\n        assert.fail();\n    });\n});\n\ntest(\"js-dos can't start without canvas (ready style)\", (done) => {\n    const dos = Dos(null, {\n        wdosboxUrl,\n    } as DosOptions);\n    const promise = dos.ready((fs, main) => {\n        const fn = () => assert.fail();\n        setTimeout(fn, 1);\n    });\n    doCatch(promise, (message) => {\n        assert.equal(\"canvas field is required, but not set!\", message);\n        done();\n    });\n});\n\ntest(\"js-dos should start with canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            ci.exit();\n            done();\n        });\n    });\n});\n\ntest(\"js-dos can take screenshot of canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            compareAndExit(\"init.png\", ci, done);\n        });\n    });\n});\n\nsuite(\"js-dos-fs\");\n\ntest(\"js-dos-fs createFile error handling\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.equal(message, \"Can't create file '', because file name is empty\");\n            done();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"\", \"\");\n    });\n});\n\ntest(\"js-dos-fs createFile error handling 2\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.equal(message, \"Can't create file '/home/', because file name is empty\");\n            done();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"/home/\", \"\");\n    });\n});\n\ntest(\"js-dos-fs can create file\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"/wiki/musk\", wikiElonMusk);\n        doNext(main(), (ci) => {\n            doNext(ci.shell(\"type wiki\\\\musk\"), () => {\n                compareAndExit(\"elonmusk.png\", ci, done);\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can create file (windows path)\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"C:\\\\wiki\\\\musk\", wikiElonMusk);\n        doNext(main(), (ci) => {\n            doNext(ci.shell(\"type wiki\\\\musk\"), () => {\n                compareAndExit(\"elonmusk.png\", ci, done);\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs clearing IDBFS db\", (done) => {\n    const errorFn = (event) => {\n        console.error(event);\n        assert.fail();\n    };\n\n    const deleteTest = indexedDB.deleteDatabase(\"/test\");\n    deleteTest.onerror = errorFn;\n    deleteTest.onsuccess = (event) => {\n        const deleteArkanoid = indexedDB.deleteDatabase(\"/arkanoid\");\n        deleteArkanoid.onerror = errorFn;\n        deleteArkanoid.onsuccess = (event) => {\n            done();\n        };\n    };\n});\n\ntest(\"js-dos-fs can mount archive on persistent point [empty db]\", (done) => {\n    let isOnProgress = false;\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            isOnProgress = true;\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\", \"/test\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir test\"), () => {\n                    assert.ok(isOnProgress);\n                    compareAndExit(\"persistent-mount.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can mount archive on persistent point [existent db]\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\", \"/test\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir test\"), () => {\n                    compareAndExit(\"persistent-mount.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can mount ANOTHER archive on persistent point [empty db]\", (done) => {\n    let isOnProgress = false;\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            isOnProgress = true;\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"arkanoid.zip\", \"/arkanoid\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir arkanoid\"), () => {\n                    assert.ok(isOnProgress);\n                    compareAndExit(\"persistent-mount-arkanoid.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can mount ANOTHER archive on persistent point [existent db]\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"arkanoid.zip\", \"/arkanoid\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir arkanoid\"), () => {\n                    compareAndExit(\"persistent-mount-arkanoid.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can mount multiple persistent point [existent db]\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extractAll([\n            { url: \"arkanoid.zip\", mountPoint: \"/arkanoid\" },\n            { url: \"digger.zip\", mountPoint: \"/test\" },\n        ]), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir arkanoid\", \"dir ..\\\\test\"), () => {\n                    compareAndExit(\"presistent-mount-multiple.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\nsuite(\"js-dos\");\n\ntest(\"js-dos should provide user level dosbox.conf\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"dosbox.conf\", `\n        [autoexec]\n        mount c .\n        c:\n        cd HOME\n        cd WEB_USER\n        cd DOSBOX~1\n        type dosbox~1.con\n        `);\n\n        doNext(main([\"-conf\", \"dosbox.conf\"]), (ci) => {\n            compareAndExit(\"jsdos-conf.png\", ci, done);\n        });\n    });\n});\n\ntest(\"js-dos can create and read dosbox.conf\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"dosbox.conf\", `\n            [autoexec]\n            mount c .\n            c:\n            type dosbox~1.con\n        `);\n        doNext(main([\"-conf\", \"dosbox.conf\"]), (ci) => {\n            compareAndExit(\"dosboxconf.png\", ci, done);\n        });\n    });\n});\n\ntest(\"js-dos can run digger.zip\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\"), () => {\n            doNext(main([\"DIGGER.COM\"]), (ci) => {\n                const fn = () => {\n                    compareAndExit(\"digger.png\", ci, done);\n                    // saveImage(ci);\n                };\n\n                setTimeout(fn, 5000);\n            });\n        });\n    });\n});\n\ntest(\"js-dos can simulate key events\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl,\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\"), () => {\n            doNext(main([\"DIGGER.COM\"]), (ci) => {\n                ci.simulateKeyPress(37); // left arrow\n                const fn = () => {\n                    compareAndExit(\"digger-end.png\", ci, done);\n                };\n\n                setTimeout(fn, 5000);\n            });\n        });\n    });\n});\n\nconst saveImage = (ci: DosCommandInterface) => {\n    ci.screenshot().then((data) => {\n        const w = window.open(\"about:blank\", \"image from canvas\");\n        w.document.write(\"<img src='\" + data + \"' alt='from canvas'/>\");\n    });\n};\n\nconst wikiElonMusk = `\nElon Reeve Musk FRS (/ˈiːlɒn/; born June 28, 1971) is a\ntechnology entrepreneur and engineer.[10][11][12]\nHe holds South African, Canadian, and U.S. citizenship\nand is the founder, CEO, and lead designer of SpaceX;\n[13] co-founder, CEO, and product architect of Tesla, Inc.;\n[14] co-founder and CEO of Neuralink; and co-founder of PayPal.\nIn December 2016, he was ranked 21st on the Forbes list of\nThe World's Most Powerful People.[15] As of October 2018,\nhe has a net worth of $22.8 billion and is listed by Forbes\nas the 54th-richest person in the world.[16]\nBorn and raised in Pretoria, South Africa, Musk moved to\nCanada when he was 17 to attend Queen's University.\nHe transferred to the University of Pennsylvania two years\nlater, where he received an economics degree from\nthe Wharton School and a degree in physics from the College\nof Arts and Sciences. He began a Ph.D.\nin applied physics and material sciences at Stanford University\nin 1995 but dropped out after two days to pursue\nan entrepreneurial career. He subsequently co-founded Zip2, a\nweb software company, which was acquired by Compaq\nfor $340 million in 1999. Musk then founded X.com, an online bank.\nIt merged with Confinity in 2000 and later that\nyear became PayPal, which was bought by eBay for $1.5 billion\nin October 2002.[17][18][19][20]\n`;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}