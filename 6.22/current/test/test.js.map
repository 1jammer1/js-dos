{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-cache-db.ts","js-dos-ts/js-dos-cache-noop.ts","js-dos-ts/js-dos-cache.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-conf.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts","node_modules/assert/assert.js","node_modules/assert/node_modules/inherits/inherits_browser.js","node_modules/assert/node_modules/util/support/isBufferBrowser.js","node_modules/assert/node_modules/util/util.js","node_modules/process/browser.js","test/compare.ts","test/do.ts","test/test.ts"],"names":[],"mappings":"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","file":"test.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22.25 (731439e3b59c1a12db29c9a4386d16a3)\",\n    jsVersion: \"5ef1a9e02e40bfd52a96b51368f437dbf30443b5\",\n    jsSize:  468455,\n    wasmVersion: \"d9f429891f4b5026d1dacb873f8f7a2a\",\n    wasmSize: 2140358,\n};\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheDb implements ICache {\n\n    public version: string;\n    private storeName: string = \"files\";\n    private indexedDB: IDBFactory;\n    private db: IDBDatabase | null = null;\n\n    constructor(version: string, onready: (cache: ICache) => void, onerror: (msg: string) => void) {\n        this.version = version;\n        this.indexedDB = window.indexedDB || (window as any).mozIndexedDB\n            || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n\n        if (!this.indexedDB) {\n            onerror(\"Indexed db is not supported on this host\");\n            return;\n        }\n\n        const openRequest = this.indexedDB.open(\"js-dos-cache (\" + version + \")\", 1);\n        openRequest.onerror = (event) => {\n            onerror(\"Can't open cache database\");\n        };\n        openRequest.onsuccess = (event) => {\n            this.db = openRequest.result;\n            onready(this);\n        };\n        openRequest.onupgradeneeded = (event) => {\n            try {\n                this.db = openRequest.result;\n                this.db.onerror = (event) => {\n                    onerror(\"Can't upgrade cache database\");\n                };\n\n                this.db.createObjectStore(this.storeName);\n            } catch (e) {\n                onerror(\"Can't upgrade cache database\");\n            }\n        };\n    }\n\n    public put(key: string, data: any, onflush: () => void) {\n        if (this.db === null) {\n            onflush();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readwrite\");\n        transaction.oncomplete = () => onflush();\n        transaction.objectStore(this.storeName).put(data, key);\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        if (this.db === null) {\n            onerror(\"db is not initalized\");\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).get(key);\n        request.onerror = () => onerror(\"Can't read value for key '\" + key + \"'\");\n        request.onsuccess = () => {\n            if (request.result) {\n                ondata(request.result);\n            } else {\n                onerror(\"Result is empty for key '\" + key + \"', result: \" + request.result);\n            }\n        };\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        if (this.db === null) {\n            onend();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).openCursor();\n        request.onerror = () => onend();\n        request.onsuccess = (event) => {\n            const cursor = (event.target as any).result as IDBCursorWithValue;\n            if (cursor) {\n                each(cursor.key.toString(), cursor.value);\n                cursor.continue();\n            } else {\n                onend();\n            }\n        };\n    }\n}\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheNoop implements ICache {\n    public put(key: string, data: any, onflush: () => void) {\n        // nothing\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        onerror(\"Cache is not supported on this host\");\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        onend();\n    }\n}\n","import CacheDb from \"./js-dos-cache-db\";\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\n\nexport interface ICache {\n    put: (key: string, data: any, onflush: () => void) => void;\n    get: (key: string, ondata: (data: any) => void, onerror: (msg: string) => void) => void;\n    forEach: (each: (key: string, value: any) => void, onend: () => void) => void;\n}\n\nexport default function openCache(module: DosModule, onready: (cache: ICache) => void) {\n    new CacheDb(module.version, onready, (msg: string) => {\n        if (module.log !== undefined) {\n            module.log(\"ERR! Can't initalize cache, cause: \" + msg);\n        }\n        onready(new CacheNoop());\n    });\n}\n","// # DosCommandInterface\n// Is abstraction that allows you to control runned instance of js-dos\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosCommandInterface {\n    public dos: DosModule;\n    private em: any; // typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInterface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInterface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    // * `width()` - return dosbox window width in pixels\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    // * `height()` - return dosbox window height in pixels\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    // * `shell([cmd1, cmd2, ...])` - executes passed commands\n    // in dosbox shell if it's runned, returns Promise that\n    // resolves when commands sequence is executed\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    // * `screenshot()` - get screnshot of canvas as ImageData\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    // * `exit()` - immediately exit from runtime\n    public exit() {\n        try {\n            this.dos.terminate();\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"frame\":\n                this.onframe();\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = this.em.lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    if (this.dos.onerror !== undefined) {\n                        this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                            \"', because it's bigger then max cmd length \" + maxLength);\n                    }\n                    return;\n                }\n\n                this.em.stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n            default:\n            /* do nothing */\n        }\n    }\n\n    private onframe() {\n        this.dos.tick();\n    }\n}\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n","// # js-dos default config\n// This is default config for dosbox.\n\n/* tslint:disable:max-line-length */\nexport const jsdosconf = `\n# This is the configurationfile for DOSBox 0.74. (Please use the latest version of DOSBox)\n# Lines starting with a # are commentlines and are ignored by DOSBox.\n# They are used to (briefly) document the effect of each option.\n\n[sdl]\n#       fullscreen: Start dosbox directly in fullscreen. (Press ALT-Enter to go back)\n#       fulldouble: Use double buffering in fullscreen. It can reduce screen flickering, but it can also result in a slow DOSBox.\n#   fullresolution: What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).\n#                     Using your monitor's native resolution with aspect=true might give the best results.\n#                     If you end up with small window on a large screen, try an output different from surface.\n# windowresolution: Scale the window to this size IF the output device supports hardware scaling.\n#                     (output=surface does not!)\n#           output: What video system to use for output.\n#                   Possible values: surface, overlay, opengl, openglnb.\n#         autolock: Mouse will automatically lock, if you click on the screen. (Press CTRL-F10 to unlock)\n#      sensitivity: Mouse sensitivity.\n#      waitonerror: Wait before closing the console if dosbox has an error.\n#         priority: Priority levels for dosbox. Second entry behind the comma is for when dosbox is not focused/minimized.\n#                     pause is only valid for the second entry.\n#                   Possible values: lowest, lower, normal, higher, highest, pause.\n#       mapperfile: File used to load/save the key/event mappings from. Resetmapper only works with the defaul value.\n#     usescancodes: Avoid usage of symkeys, might not work on all operating systems.\n\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nautolock=false\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n\n[dosbox]\n# language: Select another language file.\n#  machine: The type of machine tries to emulate.\n#           Possible values: hercules, cga, tandy, pcjr, ega, vgaonly, svga_s3, svga_et3000, svga_et4000, svga_paradise, vesa_nolfb, vesa_oldvbe.\n# captures: Directory where things like wave, midi, screenshot get captured.\n#  memsize: Amount of memory DOSBox has in megabytes.\n#             This value is best left at its default to avoid problems with some games,\n#             though few games might require a higher value.\n#             There is generally no speed advantage when raising this value.\n\nlanguage=\nmachine=svga_s3\ncaptures=capture\nmemsize=16\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[cpu]\n#      core: CPU Core used in emulation. auto will switch to dynamic if available and appropriate.\n#            Possible values: auto, dynamic, normal, simple.\n#   cputype: CPU Type used in emulation. auto is the fastest choice.\n#            Possible values: auto, 386, 386_slow, 486_slow, pentium_slow, 386_prefetch.\n#    cycles: Amount of instructions DOSBox tries to emulate each millisecond.\n#            Setting this value too high results in sound dropouts and lags.\n#            Cycles can be set in 3 ways:\n#              'auto'          tries to guess what a game needs.\n#                              It usually works, but can fail for certain games.\n#              'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n#                              (Example: fixed 4000).\n#              'max'           will allocate as much cycles as your computer is able to handle.\n#\n#            Possible values: auto, fixed, max.\n#   cycleup: Amount of cycles to decrease/increase with keycombo.(CTRL-F11/CTRL-F12)\n# cycledown: Setting it lower than 100 will be a percentage.\n\ncore=auto\ncputype=auto\ncycles=auto\ncycleup=10\ncycledown=20\n\n[mixer]\n#   nosound: Enable silent mode, sound is still emulated though.\n#      rate: Mixer sample rate, setting any device's rate higher than this will probably lower their sound quality.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n# blocksize: Mixer block size, larger blocks might help sound stuttering but sound will also be more lagged.\n#            Possible values: 1024, 2048, 4096, 8192, 512, 256.\n# prebuffer: How many milliseconds of data to keep on top of the blocksize.\n\nnosound=false\nrate=44100\nblocksize=1024\nprebuffer=20\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n\n[autoexec]\n# Lines in this section will be run at startup.\n# You can put your MOUNT lines here.\n\n# https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█ \n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n`;\n","// # DosFS\n// API for working with file system of dosbox\n\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: any; // typeof Module;\n    private fs: any;\n    private syncingPromise: Promise<void> | null = null;\n    private lastSyncTime = 0;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n        this.fs = (dos as any).FS;\n\n        // Sync fs to indexed db periodically\n        this.dos.registerTickListener(() => {\n            if (Date.now() - this.lastSyncTime < 5000) {\n                return;\n            }\n            this.lastSyncTime = Date.now();\n            this.syncFs();\n        });\n        this.dos.registerPauseListener(() => this.syncFs());\n        this.dos.registerTerminateListener(() => this.syncFs());\n    }\n\n    public chdir(path: string) {\n        this.fs.chdir(path);\n    }\n\n    // ### extract\n    public extract(url: string, persistentMount: string = \"/\", type: string = \"zip\") {\n        // download archive by given url and then extract it in cwd (cwd will be mounted as C:)\n        //\n        // * `url` - url for downloading archive\n        // * `persistentMount` - is a path to mount archive contents, by default mount point is '/' which\n        // is a MEMFS that is live only in one ssesion. It means that after restart all progress will be erased.\n        // If you set some path (any), then this path will be stored across sessions in indexed db. It means\n        // that progress will be there after browser restart.\n        // * `type` - archive type **only zip is supported**\n        //\n        // this method will return `Promise<void>`, that will be resolved\n        // on success with empty object or rejected\n\n        persistentMount = this.normalizePath(persistentMount);\n\n        const parts = persistentMount.split(\"/\");\n        this.createPath(parts, 0, parts.length);\n        this.chdir(persistentMount);\n\n        const extractArchiveInCwd = () => {\n            return new Promise<void>((resolve, reject) => {\n                if (type !== \"zip\") {\n                    reject(\"Only ZIP archive is supported\");\n                    return;\n                }\n\n                new Xhr(url, {\n                    cache: new CacheNoop(),\n                    responseType: \"arraybuffer\",\n                    fail: (msg) => reject(msg),\n                    progress: (total, loaded) => {\n                        if (this.dos.onprogress !== undefined) {\n                            this.dos.onprogress(\"Downloading \" + url, total, loaded);\n                        }\n                    },\n                    success: (data: ArrayBuffer) => {\n                        const bytes = new Uint8Array(data);\n                        const buffer = this.em._malloc(bytes.length);\n                        this.em.HEAPU8.set(bytes, buffer);\n                        const retcode = this.em._extract_zip(buffer, bytes.length);\n                        this.em._free(buffer);\n\n                        if (retcode === 0) {\n                            this.writeOk(persistentMount);\n                            this.syncFs().then(resolve).catch(reject);\n                        } else {\n                            reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                        }\n                    },\n                });\n            });\n        };\n\n        if (persistentMount === \"/\" || persistentMount.length === 0) {\n            return extractArchiveInCwd();\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            if (this.lastSyncTime > 0) {\n                reject(\"Can't create persistent mount point, after syncing process starts\");\n                return;\n            }\n\n            this.fs.mount(this.fs.filesystems.IDBFS, {}, persistentMount);\n            this.fs.syncfs(true, (err: any) => {\n                if (err) {\n                    reject(\"Can't restore FS from indexed db, cause: \" + err);\n                    return;\n                }\n\n                if (!this.readOk(persistentMount)) {\n                    this.dos.warn(\"Indexed db contains broken FS, resetting...\");\n                    extractArchiveInCwd().then(resolve).catch(reject);\n                    return;\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    // ### createFile\n    public createFile(file: string, body: ArrayBuffer | Uint8Array | string) {\n        // [synchronous] allow to create file in FS, you can pass absolute path.\n        // All directories will be created\n        //\n        // body can be string or ArrayBuffer or Uint8Array\n\n        if (body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n\n        // windows style path are also valid, but **drive letter is ignored**\n        // if you pass only filename, then file will be writed in root \"/\" directory\n        file = file.replace(new RegExp(\"^[a-zA-z]+:\"), \"\") .replace(new RegExp(\"\\\\\\\\\", \"g\"), \"/\");\n        const parts = file.split(\"/\");\n\n        if (parts.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because it's not valid file path\");\n            }\n            return;\n        }\n\n        const filename = parts[parts.length - 1].trim();\n\n        if (filename.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because file name is empty\");\n            }\n            return;\n        }\n\n        /* i < parts.length - 1, because last part is file name */\n        const path = this.createPath(parts, 0, parts.length - 1);\n        this.fs.createDataFile(path, filename, body, true, true, true);\n    }\n\n    private createPath(parts: string[], begin: number, end: number) {\n        let path = \"\";\n        for (let i = begin; i < end; ++i) {\n            const part = parts[i].trim();\n            if (part.length === 0) {\n                continue;\n            }\n\n            this.fs.createPath(path, part, true, true);\n            path = path + \"/\" + part;\n        }\n\n        return path;\n    }\n\n    private syncFs() {\n        if (this.syncingPromise) {\n            return this.syncingPromise;\n        }\n\n        this.syncingPromise = new Promise<void>((resolve, reject) => {\n            const startedAt = Date.now();\n            this.fs.syncfs(false, (err: any) => {\n                if (err) {\n                    this.dos.error(\"Can't sync FS to indexed db, cause: \" + err);\n                    reject(err);\n                }\n                this.syncingPromise = null;\n                this.lastSyncTime = Date.now();\n                resolve();\n            });\n        });\n\n        return this.syncingPromise;\n    }\n\n    private normalizePath(path: string) {\n        if (path.length === 0 || path[0] !== \"/\") {\n            path = \"/\" + path;\n        }\n\n        if (path.length > 1 && path.endsWith(\"/\")) {\n            path = path.substr(0, path.length - 1);\n        }\n\n        return path;\n    }\n\n    private readOk(path: string) {\n        try {\n            const readed = this.fs.readFile(path + \"/state.fs\");\n            return readed[0] === 79 && readed[1] === 70;\n        } catch {\n            return false;\n        }\n    }\n\n    private writeOk(path: string) {\n        this.createFile(path + \"/state.fs\", new Uint8Array([79, 70])); // Ok\n    }\n\n}\n","// # DosHost\n// This class is used to detect and provide information about\n// features that supported in current environment\n\n/* tslint:disable:member-ordering */\nimport { Build } from \"./js-dos-build\";\nimport { ICache } from \"./js-dos-cache\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> | null = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        // ### WebAssembly\n        // Host able to detect is WebAssembly supported or not,\n        // this information is stored in `Host.wasmSupported` variable\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            /* do nothing WebAssembly is not supported */\n        }\n\n        // ### polyfill\n        // Host also provides limited set of polyfills to support legacy browsers\n        this.polyfill();\n    }\n\n    // Currently polyfill contains implementations for:\n    // `Math.imul`, `Math.fround`, `Math.clz32`, `Math.trunc`\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n\n    // ### resolveDosBox\n    // `resolveDosBox` is another important task of DosHost\n    public resolveDosBox(url: string, cache: ICache, module: DosModule) {\n        // When dosbox is resolved, WDOSBOX module is set to\n        // global variable `exports.WDOSBOX`. This variable is\n        // used to prevent next loads of same dosbox module.\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (!this.wasmSupported) {\n            if (module.onerror !== undefined) {\n                module.onerror(\"WebAssembly is not supported, can't resolve wdosbox\");\n            }\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, cache, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                if (module.onerror !== undefined) {\n                    module.onerror(message);\n                }\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    // If dosbox is not yet resolved, then:\n    private compileDosBox(url: string, cache: ICache, module: DosModule) {\n        const buildTotal = Build.wasmSize + Build.jsSize;\n        return new Promise((resolve, reject) => {\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            // * Host downloads `wdosbox` asm + js scripts\n            new Xhr(wasmUrl, {\n                cache,\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox\", buildTotal, loaded);\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    // * Compile dosbox wasm module\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            info.env.globalscall = (...args: any[]) => {\n                                if (module.onglobals) {\n                                    module.onglobals.apply(null, args);\n                                }\n                            };\n                            // *  Instaniate it for each new dosbox runtime\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            cache,\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, Build.wasmSize + loaded);\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: string) => {\n                                if (module.onprogress !== undefined) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n                                }\n\n                                response +=\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                /* tslint:enable:no-eval */\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n}\n\nexport const Host = new DosHost();\n","// # DosModule\n// DosModule is [emscripten module object](https://kripken.github.io/emscripten-site/docs/api_reference/module.html),\n// with additional functionality\nimport { DosRuntime } from \"./js-dos\";\nimport { Build } from \"./js-dos-build\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { jsdosconf } from \"./js-dos-conf\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosOptions } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement;\n    public version = Build.version;\n    public onglobals?: (...args: any[]) => void;\n\n    private ci: Promise<DosCommandInterface> | null = null;\n    private instance: any;\n    private fs: DosFS | null = null;\n    private ui: DosUi | null = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    private tickListeners: Array< () => void > = [];\n    private pauseListeners: Array< () => void > = [];\n    private resumeListeners: Array< () => void > = [];\n    private terminateListeners: Array< () => void > = [];\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n\n        this.registerDefaultListeners();\n    }\n\n    private registerDefaultListeners() {\n        let hidden: string;\n        let visibilityChange: string;\n\n        if (typeof document.hidden !== \"undefined\") {\n            hidden = \"hidden\";\n            visibilityChange = \"visibilitychange\";\n        } else if (typeof (document as any).mozHidden !== \"undefined\") {\n            hidden = \"mozHidden\";\n            visibilityChange = \"mozvisibilitychange\";\n        } else if (typeof (document as any).msHidden !== \"undefined\") {\n            hidden = \"msHidden\";\n            visibilityChange = \"msvisibilitychange\";\n        } else if (typeof (document as any).webkitHidden !== \"undefined\") {\n            hidden = \"webkitHidden\";\n            visibilityChange = \"webkitvisibilitychange\";\n        }\n\n        document.addEventListener(\"visibilityChange\", () => {\n            (document as any)[hidden] ? this.pause() : this.resume();\n        }, false);\n\n        window.addEventListener(\"beforeunload\", () => {\n           this.terminate();\n        });\n    }\n\n    // ### logging\n    // DosModule implements simply logging features:\n    // `debug`, `info`, `warn`, `error` methods\n    public debug(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[DEBUG] \" + message);\n        }\n    }\n\n    public info(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[INFO] \" + message);\n        }\n    }\n\n    public warn(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[WARN] \" + message);\n        }\n    }\n\n    public error(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[ERROR] \" + message);\n        }\n    }\n\n    // ### ondosbox\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n    }\n    // Method `ondosbox` is called when\n    // [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host) is resolved.\n    // This method instaniate wasm dosbox module with `this` as emscripten\n    // module object. It means that emscripten will call\n    // `this.onRuntimeInitialized` when runtime will be ready\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            if (this.onerror !== undefined) {\n                this.onerror(\"canvas field is required, but not set!\");\n            }\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => {\n                if (this.ui !== null) {\n                    this.ui.onprogress(stage, total, loaded);\n                }\n            };\n        }\n\n        // ### sdl defaults\n        // DosModule overrides defaults for emscripten SDL wrapper\n        // for maximum performance\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    // ### onRuntimeInitialized\n    public onRuntimeInitialized() {\n        const mainFn = (args?: string[]) => {\n            // When emscripten runtime is initialized and main\n            // function is called:\n            //\n            // * DosModule detach [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui)\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n\n            if (!args) {\n                args = [];\n            }\n\n            if (this.fs === null) {\n                return new Promise<DosCommandInterface>((resolve, reject) => {\n                    reject(\"IllegalState: fs is null\");\n                });\n            }\n\n            this.fs.chdir(\"/\");\n\n            // * Write default [dosbox.conf](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-conf)\n            // file to user directory\n            this.fs.createFile(\"/home/web_user/.dosbox/dosbox-jsdos.conf\", jsdosconf);\n            // * Mount emscripten FS as drive c:\n            args.unshift(\"-userconf\", \"-c\", \"mount c .\", \"-c\", \"c:\");\n            // * Run dosbox with passed arguments and resolve\n            // [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci)\n            (this as any).callMain(args);\n            return new Promise<DosCommandInterface>((resolve) => {\n                new DosCommandInterface(this, (ci: DosCommandInterface) => {\n                    resolve(ci);\n                });\n            });\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n    // ### registerTickListener\n    // registred tick listener it will be called each frame\n    public registerTickListener(listener: () => void) {\n        this.tickListeners.push(listener);\n    }\n\n    // ### registerPauseListener\n    // registred tick listener it will be called each frame\n    public registerPauseListener(listener: () => void) {\n        this.pauseListeners.push(listener);\n    }\n\n    // ### registerResumeListener\n    // registred tick listener it will be called each frame\n    public registerResumeListener(listener: () => void) {\n        this.resumeListeners.push(listener);\n    }\n\n    // ### registerTerminateListener\n    // registred tick listener it will be called each frame\n    public registerTerminateListener(listener: () => void) {\n        this.terminateListeners.push(listener);\n    }\n\n    // ### tick\n    // tick is called internally each frame, no need to call\n    // it manually\n    public tick() {\n        for (const l of this.tickListeners) {\n            l();\n        }\n    }\n\n    // ### pause\n    // pause is called when dosbox tab became inactive\n    public pause() {\n        for (const l of this.pauseListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // resume is called when dosbox tab became active\n    public resume() {\n        for (const l of this.resumeListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // terminate is called when dosbox tab is closed\n    public terminate() {\n        for (const l of this.terminateListeners) {\n            l();\n        }\n    }\n\n}\n","// # DosOptions\n// Is a options object that you pass to constructor of\n// [Dos](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos)\n// class, to configure emulation layer\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\n\nexport class DosOptions {\n\n    // ### onprogress\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n    // progress event listener, it is fired when loading progress is changed\n    // if this function is not set, then\n    // [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui) will be used\n    // to show progress\n    //\n    // * `stage` - current loading stage\n    // * `total` - total bytes to download on current stage\n    // * `loaded` - downloaded bytes\n\n    // ### onerror\n    public onerror?: (message: string) => void;\n    // this function is called when error happens\n    //\n    // * `message` - infomation about error\n\n    // ### log\n    public log?: (message: string) => void;\n    // you can provide log function, to override logging, by default js-dos uses console.log as implementation\n\n    // ### wdosboxUrl\n    public wdosboxUrl?: string;\n    // you can set alternative url for downloading js-dos script, default is 'wdosbox.js'\n\n}\n","// # JsDosUi\n// Optional ui module for js-dos.\n// This ui will be applied if client did not set `onprogress` in\n// [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement | null = null;\n    private loaderMessage: HTMLDivElement | null = null;\n    private hidden: boolean = true;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        // ### How it works\n        // This ui replace canvas element with div .dosbox-container,\n        // that contains original canvas and .dosbox-overlay as children\n        // You can change style of ui by editing css for this two classes\n\n        try {\n            if (document.getElementById(\"js-dos-ui-css\") === null) {\n                const style = document.createElement(\"style\") as HTMLStyleElement;\n                style.id = \"js-dos-ui-css\";\n                style.innerHTML = this.css;\n                document.head.appendChild(style);\n            }\n\n            if (this.canvas.parentElement !== null && this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = document.createElement(\"div\") as HTMLDivElement;\n                container.className = \"dosbox-container\";\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = document.createElement(\"div\") as HTMLDivElement;\n                overlay.className = \"dosbox-overlay\";\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            if (container === null) {\n                throw new Error(\"Illegal state, container is null\");\n            }\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            if (this.overlay === null) {\n                throw new Error(\"Illegal state, overlay is null\");\n            }\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = true;\n            this.show();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        if (this.loaderMessage !== null) {\n            this.loaderMessage.innerHTML = message;\n        }\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: none\");\n        }\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: block\");\n        }\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string): HTMLDivElement | null {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child: HTMLElement | null = parent.children[i] as HTMLElement;\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    // ### Style\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #f80; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #f80; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #f80; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #f80; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #f80; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #f80; }\n    `;\n\n    // ### Template\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","import { ICache } from \"./js-dos-cache\";\nimport CacheNoop from \"./js-dos-cache-noop\";\n\n// # Xhr\n// `Xhr` is small wrapper over XMLHttpRequest, that provides some\n// handy methods\n\n// You can configre Xhr with XhrOptions object:\ninterface XhrOptions {\n    cache: ICache;\n    method?: string;\n    success?: (response: any) => void;\n    progress?: (total: number, loaded: number) => void;\n    fail?: (url: string, status: number, message: string) => void;\n    data?: string;\n    responseType?: XMLHttpRequestResponseType;\n}\n// * `method` - \"GET\" | \"POST\"\n// * `success` - callback when resource is downloaded\n// * `progress` - callback for progress\n// * `fail` - fail callback\n// * `data` - data for POST request, should typeof `application/x-www-form-urlencoded`\n// * `responseType` - XMLHttpRequestResponseType\n\n// Class Xhr does not have any public methods\nexport class Xhr {\n    private cache: ICache;\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest | null = null;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.cache = options.cache || new CacheNoop();\n\n        if (this.options.method  === \"GET\") {\n            this.cache.get(this.resource, (data) => {\n                if (this.options.success !== undefined) {\n                    this.options.success(data);\n                }\n            }, () => {\n                this.makeHttpRequest();\n            });\n        }\n    }\n\n    private makeHttpRequest() {\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method || \"GET\", this.resource, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, (this.xhr as XMLHttpRequest).status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    private onReadyStateChange() {\n        const xhr = (this.xhr as XMLHttpRequest);\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    if (this.options.progress !== undefined) {\n                        this.options.progress(total, total);\n                    }\n\n                    if (this.options.method === \"GET\" && this.resource.indexOf(\"?\") < 0) {\n                        this.cache.put(this.resource, xhr.response, () => { /**/ });\n                    }\n\n                    return this.options.success(xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n}\n","\n// # Example\n// ```javascript\n// Dos(canvas).ready((fs, main) => {\n//     fs.extract(\"digger.zip\").then(() => {\n//         main([\"-c\", \"DIGGER.COM\"])\n//     });\n// });\n// ```\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n\n// # Dos\n\nimport openCache from \"./js-dos-cache\";\nimport CacheDb from \"./js-dos-cache-db\";\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// When you call `Dos(canvas, options)` js-dos behind the scene will download\n// dosbox and prepare it to start. This function will return `Promise<DosReadyPromise>`\n// that will be resolved when dosbox is ready. In case of error promise\n// will be rejected.\n//\n// * `canvas`: HTMLCanvasElement - this canvas element is used as window for dosbox\n// * `options`: [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options) -\n// optional configuration object\nexport default function Dos(canvas: HTMLCanvasElement, options?: DosOptions) {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n\n        if (!options) {\n            options = {};\n        }\n\n        if (!options.onerror) {\n            options.onerror = (message: string) => {\n                /* tslint:disable:no-console */\n                console.error(message);\n                /* tslint:enable:no-console */\n            };\n        }\n\n        Object.assign(module, options);\n\n        // ### Error handling\n        // Error handling should support both ways:\n        //\n        // * Through rejecting of promise\n        // * Fire onerror function of DosOptions object\n\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        openCache(module, (cache) => {\n            // See [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host)\n            // to understand resolving of emulation layer (dosbox).\n            Host.resolveDosBox(module.wdosboxUrl as string, cache, module);\n        });\n\n    });\n\n// ### DosReadyPromise\n// Is a Promise object with additional method ready.\n// Method `ready` is just a wrapper over `then` method that\n// split resolved object into meaningful parts.\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n        return dosReadyPromise;\n    };\n    return dosReadyPromise;\n}\n\nexport type DosMainFn = (args?: string[]) => Promise<DosCommandInterface>;\n\n// Plain promise will be resolved with `DosRuntime` interface, that\n// includes:\n//\n// * `fs`: [DosFS](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-fs) -\n// API for working with dosbox filesystem\n// * `main`: DosMainFn - a function that you should call to actuall start\n// dosbox. It's like a main function in C++, or shell command line. This function\n// will return Promise of [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci).\n// You can use it to control runned dosbox.\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // `onready` - callback that receive DosRuntime splitted by fields\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => Promise<DosRuntime>;\n}\n\n(window as any).Dos = Dos;\n","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as assert from \"assert\";\nimport { DosCommandInterface } from \"../js-dos-ts/js-dos-ci\";\nimport { doThen } from \"./do\";\n\n// Compare\n// =======\n// Compare image from url, and screenshot from DosBox\n\nexport function compareAndExit(imageUrl: string, ci: DosCommandInterface, done: () => void) {\n    compare(imageUrl, ci, (wrong) => {\n        assert.equal(0, wrong);\n        ci.exit();\n        done();\n    });\n}\n\nconst compare = (imageUrl: string, ci: DosCommandInterface, callback: (wrong: number) => void) => {\n    doThen(ci.screenshot(), (actualUrl: string) => {\n        const img = new Image();\n        img.onload = () => {\n            assert(img.width === ci.width(), \"Invalid width: \" + ci.width() + \", should be \" + img.width);\n            assert(img.height === ci.height(), \"Invalid height: \" + ci.height() + \", should be \" + img.height);\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0);\n            const expected = ctx.getImageData(0, 0, img.width, img.height).data;\n\n            const actualImage = new Image();\n            actualImage.onload = () => {\n                /*\n                document.body.appendChild(img); // for comparisons\n                var div = document.createElement('div');\n                div.innerHTML = '^=expected, v=actual';\n                document.body.appendChild(div);\n                document.body.appendChild(actualImage); // to grab it for creating the test reference\n                */\n\n                const actualCanvas = document.createElement(\"canvas\");\n                actualCanvas.width = actualImage.width;\n                actualCanvas.height = actualImage.height;\n                const actualCtx = actualCanvas.getContext(\"2d\");\n                actualCtx.drawImage(actualImage, 0, 0);\n                const actual = actualCtx.getImageData(0, 0, actualImage.width, actualImage.height).data;\n\n                let total = 0;\n                const width = img.width;\n                const height = img.height;\n                for (let x = 0; x < width; x++) {\n                    for (let y = 0; y < height; y++) {\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 0] - actual[y * width * 4 + x * 4 + 0]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 1] - actual[y * width * 4 + x * 4 + 1]);\n                        total += Math.abs(expected[y * width * 4 + x * 4 + 2] - actual[y * width * 4 + x * 4 + 2]);\n                    }\n                }\n\n                // floor, to allow some margin of error for antialiasing\n                const wrong = Math.floor(total / (img.width * img.height * 3));\n                callback(wrong);\n            };\n            actualImage.src = actualUrl;\n        };\n        img.src = imageUrl;\n    });\n};\n","import assert = require(\"assert\");\nimport { DosMainFn, DosReadyPromise } from \"../js-dos-ts/js-dos\";\nimport { DosFS } from \"../js-dos-ts/js-dos-fs\";\n\n// Do\n// ==\n// We use this functions to avoid problem of throwing,\n// exceptions inside promise.\n// Mocha can't handle exceptions if they are throwed in promise\n\nexport function doThen<T>(promise: Promise<T>, fn: (v: T) => void) {\n    promise.then((v: T) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doCatch<T>(promise: Promise<T>, fn: (v: string) => void) {\n    promise.catch((v: string) => {\n        const topFn = () => {\n            fn(v);\n        };\n\n        setTimeout(topFn, 1);\n    });\n}\n\nexport function doNext<T>(promise: Promise<T>, fn: (v: T) => void) {\n    doThen(promise, fn);\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n\nexport function doReady(promise: DosReadyPromise, fn: (fs: DosFS, main: DosMainFn) => void) {\n    doThen(promise, (runtime) => {\n        fn(runtime.fs, runtime.main);\n    });\n    doCatch(promise, (msg: string) => assert.fail(msg));\n}\n","/* tslint:disable:max-line-length */\n/* tslint:disable:no-console */\n\nimport * as assert from \"assert\";\nimport Dos from \"../js-dos-ts/js-dos\";\nimport { ICache } from \"../js-dos-ts/js-dos-cache\";\nimport CacheDb from \"../js-dos-ts/js-dos-cache-db\";\nimport CacheNoop from \"../js-dos-ts/js-dos-cache-noop\";\nimport { DosCommandInterface } from \"../js-dos-ts/js-dos-ci\";\nimport { Host } from \"../js-dos-ts/js-dos-host\";\nimport { DosModule } from \"../js-dos-ts/js-dos-module\";\nimport { DosOptions } from \"../js-dos-ts/js-dos-options\";\nimport { compareAndExit } from \"./compare\";\nimport { doCatch, doNext, doReady, doThen } from \"./do\";\n\nsuite(\"js-dos-host\");\n\ntest(\"loader should notify about error if wasm is not supported\", (done) => {\n    const oldValue = Host.wasmSupported;\n    Host.wasmSupported = false;\n    Host.resolveDosBox(\"wrongurl.js\", new CacheNoop(), {\n        onerror: (message: string) => {\n            Host.wasmSupported = oldValue;\n            assert.equal(\"WebAssembly is not supported, can't resolve wdosbox\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should notify about error, if it can't download wdosbox\", (done) => {\n    Host.resolveDosBox(\"wrongurl.js\", new CacheNoop(), {\n        onerror: (message: string) => {\n            assert.equal(\"Can't download wasm, code: 404, message: connection problem, url: wrongurl.wasm.js\", message);\n            done();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should show progress loading and use cache\", (done) => {\n    let isGET = false;\n    let isPUT = false;\n    class TestCache implements ICache {\n        public put(key: string, data: any, onflush: () => void) {\n            isPUT = isPUT || (key === \"/wdosbox.wasm.js\" && data instanceof ArrayBuffer && (data as ArrayBuffer).byteLength > 0);\n            onflush();\n        }\n\n        public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n            isGET = isGET || key === \"/wdosbox.wasm.js\";\n            onerror(\"not in cache\");\n        }\n\n        public forEach(each: (key: string, value: any) => void, onend: () => void) {\n            onend();\n        }\n    }\n\n    let lastLoaded = -1;\n    Host.resolveDosBox(\"/wdosbox.js\", new TestCache(), {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            console.log(stage, total, loaded);\n            assert.equal(true, loaded <= total, loaded + \"<=\" + total);\n            assert.equal(true, lastLoaded <= loaded, lastLoaded + \"<=\" + loaded);\n            lastLoaded = loaded;\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            assert.ok(isGET);\n            assert.ok(isPUT);\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should never load twice wdosbox\", (done) => {\n    Host.resolveDosBox(\"/wdosbox.js\", new CacheNoop(), {\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\ntest(\"loader should fire event when wdosbox is loaded\", (done) => {\n    Host.resolveDosBox(\"/wdosbox.js\", new CacheNoop(), {\n        ondosbox: (dosbox: any, instantiateWasm: any) => {\n            assert.ok(dosbox);\n            assert.ok(instantiateWasm);\n            done();\n        },\n        onerror: (message: string) => {\n            assert.fail();\n        },\n    } as DosModule);\n});\n\nsuite(\"js-dos\");\n\ntest(\"js-dos can't start without canvas (listener style)\", (done) => {\n    Dos(null, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message: string) => {\n            assert.equal(\"canvas field is required, but not set!\", message);\n            done();\n        },\n    } as DosOptions);\n});\n\ntest(\"js-dos can't start without canvas (promise style)\", (done) => {\n    const dos = Dos(null, {\n        wdosboxUrl: \"/wdosbox.js\",\n    } as DosOptions);\n    doCatch(dos, (message) => {\n        assert.equal(\"canvas field is required, but not set!\", message);\n        done();\n    });\n    doThen(dos, () => {\n        assert.fail();\n    });\n});\n\ntest(\"js-dos can't start without canvas (ready style)\", (done) => {\n    const dos = Dos(null, {\n        wdosboxUrl: \"/wdosbox.js\",\n    } as DosOptions);\n    const promise = dos.ready((fs, main) => {\n        const fn = () => assert.fail();\n        setTimeout(fn, 1);\n    });\n    doCatch(promise, (message) => {\n        assert.equal(\"canvas field is required, but not set!\", message);\n        done();\n    });\n});\n\ntest(\"js-dos should start with canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            ci.exit();\n            done();\n        });\n    });\n});\n\ntest(\"js-dos can take screenshot of canvas\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n    doReady(dos, (fs, main) => {\n        doNext(main([]), (ci) => {\n            compareAndExit(\"init.png\", ci, done);\n        });\n    });\n});\n\nsuite(\"js-dos-fs\");\n\ntest(\"js-dos-fs createFile error handling\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.equal(message, \"Can't create file '', because file name is empty\");\n            done();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"\", \"\");\n    });\n});\n\ntest(\"js-dos-fs createFile error handling 2\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.equal(message, \"Can't create file '/home/', because file name is empty\");\n            done();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"/home/\", \"\");\n    });\n});\n\ntest(\"js-dos-fs can create file\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"/wiki/musk\", wikiElonMusk);\n        doNext(main(), (ci) => {\n            doNext(ci.shell(\"type wiki\\\\musk\"), () => {\n                compareAndExit(\"elonmusk.png\", ci, done);\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can create file (windows path)\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"C:\\\\wiki\\\\musk\", wikiElonMusk);\n        doNext(main(), (ci) => {\n            doNext(ci.shell(\"type wiki\\\\musk\"), () => {\n                compareAndExit(\"elonmusk.png\", ci, done);\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs clearing IDBFS db\", (done) => {\n    const request = indexedDB.deleteDatabase(\"/test\");\n\n    request.onerror = (event) => {\n        console.error(event);\n        assert.fail();\n    };\n\n    request.onsuccess = (event) => {\n        done();\n    };\n});\n\ntest(\"js-dos-fs can mount archive on persistent point [empty db]\", (done) => {\n    let isOnProgress = false;\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            isOnProgress = true;\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\", \"/test\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir test\"), () => {\n                    assert.ok(isOnProgress);\n                    compareAndExit(\"pesistent-mount.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\ntest(\"js-dos-fs can mount archive on persistent point [existent db]\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n        onprogress: (stage: string, total: number, loaded: number) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\", \"/test\"), () => {\n            doNext(main(), (ci) => {\n                doNext(ci.shell(\"dir test\"), () => {\n                    compareAndExit(\"pesistent-mount.png\", ci, done);\n                });\n            });\n        });\n    });\n});\n\nsuite(\"js-dos\");\n\ntest(\"js-dos should provide user level dosbox.conf\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"dosbox.conf\", `\n        [autoexec]\n        mount c .\n        c:\n        cd HOME\n        cd WEB_USER\n        cd DOSBOX~1\n        type dosbox~1.con\n        `);\n\n        doNext(main([\"-conf\", \"dosbox.conf\"]), (ci) => {\n            compareAndExit(\"jsdos-conf.png\", ci, done);\n        });\n    });\n});\n\ntest(\"js-dos can create and read dosbox.conf\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n        onerror: (message) => {\n            assert.fail();\n        },\n    });\n\n    doReady(dos, (fs, main) => {\n        fs.createFile(\"dosbox.conf\", `\n            [autoexec]\n            mount c .\n            c:\n            type dosbox~1.con\n        `);\n        doNext(main([\"-conf\", \"dosbox.conf\"]), (ci) => {\n            compareAndExit(\"dosboxconf.png\", ci, done);\n        });\n    });\n});\n\ntest(\"js-dos can run digger.zip\", (done) => {\n    const dos = Dos(document.getElementById(\"canvas\") as HTMLCanvasElement, {\n        wdosboxUrl: \"/wdosbox.js\",\n    });\n\n    doReady(dos, (fs, main) => {\n        doNext(fs.extract(\"digger.zip\"), () => {\n            doNext(main([\"DIGGER.COM\"]), (ci) => {\n                const fn = () => {\n                    compareAndExit(\"digger.png\", ci, done);\n                    // saveImage(ci);\n                };\n\n                setTimeout(fn, 5000);\n            });\n        });\n    });\n});\n\nconst saveImage = (ci: DosCommandInterface) => {\n    ci.screenshot().then((data) => {\n        const w = window.open(\"about:blank\", \"image from canvas\");\n        w.document.write(\"<img src='\" + data + \"' alt='from canvas'/>\");\n    });\n};\n\nconst wikiElonMusk = `\nElon Reeve Musk FRS (/ˈiːlɒn/; born June 28, 1971) is a\ntechnology entrepreneur and engineer.[10][11][12]\nHe holds South African, Canadian, and U.S. citizenship\nand is the founder, CEO, and lead designer of SpaceX;\n[13] co-founder, CEO, and product architect of Tesla, Inc.;\n[14] co-founder and CEO of Neuralink; and co-founder of PayPal.\nIn December 2016, he was ranked 21st on the Forbes list of\nThe World's Most Powerful People.[15] As of October 2018,\nhe has a net worth of $22.8 billion and is listed by Forbes\nas the 54th-richest person in the world.[16]\nBorn and raised in Pretoria, South Africa, Musk moved to\nCanada when he was 17 to attend Queen's University.\nHe transferred to the University of Pennsylvania two years\nlater, where he received an economics degree from\nthe Wharton School and a degree in physics from the College\nof Arts and Sciences. He began a Ph.D.\nin applied physics and material sciences at Stanford University\nin 1995 but dropped out after two days to pursue\nan entrepreneurial career. He subsequently co-founded Zip2, a\nweb software company, which was acquired by Compaq\nfor $340 million in 1999. Musk then founded X.com, an online bank.\nIt merged with Confinity in 2000 and later that\nyear became PayPal, which was bought by eBay for $1.5 billion\nin October 2002.[17][18][19][20]\n`;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}