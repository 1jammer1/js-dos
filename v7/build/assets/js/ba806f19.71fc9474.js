"use strict";(self.webpackChunkjs_dos=self.webpackChunkjs_dos||[]).push([[158],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3919:function(e,t,r){function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!n(e)}r.d(t,{b:function(){return n},Z:function(){return o}})},4996:function(e,t,r){r.d(t,{C:function(){return i},Z:function(){return a}});var n=r(2263),o=r(3919);function i(){var e=(0,n.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,r=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,r,n){var i=void 0===n?{}:n,a=i.forcePrependBaseUrl,s=void 0!==a&&a,l=i.absolute,u=void 0!==l&&l;if(!r)return r;if(r.startsWith("#"))return r;if((0,o.b)(r))return r;if(s)return t+r;var c=r.startsWith(t)?r:t+r.replace(/^\//,"");return u?e+c:c}(i,r,e,t)}}}function a(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},3876:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var n=r(4034),o=r(9973),i=(r(7294),r(3905)),a=r(4996),s={id:"estimating-performance",title:"Esitmating emulators performance"},l=void 0,u={unversionedId:"estimating-performance",id:"estimating-performance",isDocsHomePage:!1,title:"Esitmating emulators performance",description:"Performance testing",source:"@site/docs/estimating-performance.md",sourceDirName:".",slug:"/estimating-performance",permalink:"/v7/build/docs/estimating-performance",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/estimating-performance.md",version:"current",frontMatter:{id:"estimating-performance",title:"Esitmating emulators performance"},sidebar:"someSidebar",previous:{title:"DOS Janus",permalink:"/v7/build/docs/janus"},next:{title:"Contributing",permalink:"/v7/build/docs/contributing-emulators"}},c=[{value:"Performance testing",id:"performance-testing",children:[]},{value:"Running the test",id:"running-the-test",children:[]},{value:"Implementing the test",id:"implementing-the-test",children:[]}],p={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"performance-testing"},"Performance testing"),(0,i.kt)("p",null,"To measure performance we used a variant of Dhrystone 2 Test originally taken from this ",(0,i.kt)("a",{parentName:"p",href:"http://www.roylongbottom.org.uk/dhrystone%20results.htm"},"page"),". Original version used ",(0,i.kt)("inlineCode",{parentName:"p"},"clock()")," to calculate delta time. Which is good for a real pc, but is not very accurate for a dosbox emulator. When the ",(0,i.kt)("inlineCode",{parentName:"p"},"clock()")," call happened, a modified version sends ",(0,i.kt)("inlineCode",{parentName:"p"},"~>dtime")," marker to stdout which is intercepted by the test page and used to calculate delta time with ",(0,i.kt)("inlineCode",{parentName:"p"},"performance.now()")," from the browser. Source code of the modified test is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/caiiiycuk/js-dos/tree/6.22/programms/dhry2"},"here"),"."),(0,i.kt)("p",null,"Basically this test produces a lot of int operations and measures the amount of operations (Dhrystones) produced per second. Output is a ",(0,i.kt)("inlineCode",{parentName:"p"},"VAX MIPS RATING")," which is Drhystones per second divided by 1757 (is as DEC VAX 11/780 result)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"js-dos bundle")," with this test can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://talks.dos.zone/t/dhrystone-2-test-jul-2020/37086"},"Test")," page."),(0,i.kt)("h2",{id:"running-the-test"},"Running the test"),(0,i.kt)("p",null,"You can estimate performance of your device ",(0,i.kt)("a",{parentName:"p",href:"https://dos.zone/en/my"},"here"),"."),(0,i.kt)("p",null,"Example output:"),(0,i.kt)("img",{alt:"Result",src:(0,a.Z)("img/emulators-logo.jpg")}),(0,i.kt)("h2",{id:"implementing-the-test"},"Implementing the test"),(0,i.kt)("p",null,"To run this test we should use ",(0,i.kt)("inlineCode",{parentName:"p"},"emulators.js")," (from emulators) and use our ",(0,i.kt)("inlineCode",{parentName:"p"},"js-dos bundle")," to start the test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script src="/v7/build/releases/latest/emulators/emulators.js"><\/script>\n// ...\n<script>\n  emulators.pathPrefix = "/v7/build/releases/latest/emulators/";\n')),(0,i.kt)("p",null,"You can start test in ",(0,i.kt)("a",{parentName:"p",href:"/v7/build/docs/dos-worker"},"worker")," or ",(0,i.kt)("a",{parentName:"p",href:"/v7/build/docs/dos-direct"},"direct")," mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// promise is resolved when emulator is started\nconst ci = await (options.worker ?\n  emulators.dosWorker(bundle) :\n  emulators.dosDirect(bundle));\n")),(0,i.kt)("p",null,"In worker mode each test will run in a new worker. If you press ",(0,i.kt)("inlineCode",{parentName:"p"},"Start Worker")," multiple times,\nthen you will see output from multiple threads. In direct mode the browser will probably hangs.\nIn theory direct mode is faster, but browser will be unstable. Our recommendation is to use worker\nmode all time."),(0,i.kt)("p",null,"Complete example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="examples/dhry2.html"',title:'"examples/dhry2.html"'},"{}\n")))}m.isMDXComponent=!0}}]);