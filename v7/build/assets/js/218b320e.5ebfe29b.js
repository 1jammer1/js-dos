(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var i=n(0),o=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=d(n),p=i,m=b["".concat(r,".").concat(p)]||b[p]||u[p]||a;return n?o.a.createElement(m,s(s({ref:t},c),{},{components:n})):o.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return d}));var i=n(3),o=n(8),a=(n(0),n(108)),r={id:"contributing-emulators",title:"Contributing"},s={unversionedId:"contributing-emulators",id:"contributing-emulators",isDocsHomePage:!1,title:"Contributing",description:"To contribute to the emulators package do the following:",source:"@site/docs/contributing-emulators.md",slug:"/contributing-emulators",permalink:"/v7/build/docs/contributing-emulators",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/contributing-emulators.md",version:"current",sidebar:"someSidebar",previous:{title:"Esitmating emulators performance",permalink:"/v7/build/docs/estimating-performance"},next:{title:"Overview",permalink:"/v7/build/docs/doszone"}},l=[{value:"Protocol",id:"protocol",children:[]},{value:"Server",id:"server",children:[{value:"server_run()",id:"server_run",children:[]},{value:"server_add_key(keycode, pressed, timeMs)",id:"server_add_keykeycode-pressed-timems",children:[]},{value:"server_exit()",id:"server_exit",children:[]}]},{value:"Client",id:"client",children:[{value:"client_frame_set_size(width, height)",id:"client_frame_set_sizewidth-height",children:[]},{value:"client_frame_update_lines(lines, count, rgba)",id:"client_frame_update_lineslines-count-rgba",children:[]},{value:"client_sound_init(freq);",id:"client_sound_initfreq",children:[]},{value:"client_sound_push(samples, num_samples)",id:"client_sound_pushsamples-num_samples",children:[]},{value:"client_stdout(data, amount)",id:"client_stdoutdata-amount",children:[]},{value:"Communicate to server",id:"communicate-to-server",children:[]}]},{value:"Testing",id:"testing",children:[]},{value:"Running native js-dos v7",id:"running-native-js-dos-v7",children:[]},{value:"Using Docker",id:"using-docker",children:[{value:"Build image",id:"build-image",children:[]},{value:"Test image",id:"test-image",children:[]},{value:"Development",id:"development",children:[]}]},{value:"Contributing on github",id:"contributing-on-github",children:[]}],c={toc:l};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To contribute to the ",Object(a.b)("inlineCode",{parentName:"p"},"emulators")," package do the following:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Checkout ",Object(a.b)("inlineCode",{parentName:"p"},"js-dos")," repository"),Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"git clone https://github.com/caiiiycuk/js-dos"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Switch to ",Object(a.b)("inlineCode",{parentName:"p"},"emulators")," branch"),Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"git checkout -b dev origin/emulators"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Install ",Object(a.b)("a",{parentName:"p",href:"https://emscripten.org/docs/tools_reference/emsdk.html"},"emscripten sdk"),", and confgure environment to use it.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Install ",Object(a.b)("a",{parentName:"p",href:"https://cmake.org/"},"cmake")," and ",Object(a.b)("a",{parentName:"p",href:"https://gulpjs.com/"},"gulp 4"),".")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Now you can build everything with ",Object(a.b)("inlineCode",{parentName:"p"},"gulp")," command"))),Object(a.b)("p",null,"Native part of emulators is plain cmake project, you can open it\nin your favorite editor. Project have following targets:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"strong"},"sokol"))," - js-dos v7 native version: dosbox + UI based on ",Object(a.b)("a",{parentName:"li",href:"https://github.com/floooh/sokol"},"sokol"),".\nThis version is exactly the same as the web version. ",Object(a.b)("strong",{parentName:"li"},"You should use this target\nto contribute in js-dos v7.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"strong"},"direct"))," - target is used to build the web-direct version of js-dos v7.\nYou can compile it only with ",Object(a.b)("strong",{parentName:"li"},"emscripten"),"."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"strong"},"worker"))," - target is used to build the web-worker version of js-dos v7.\nYou can compile it only with ",Object(a.b)("strong",{parentName:"li"},"emscripten"),"."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"dosbox")," - original version of dosbox (UI based on SDL). You can use\nit to compare behaviour between original dosbox and js-dos v7."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"libzip")," - shared codes that contain implementation of zip."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"jsdos")," - shared codes that contain implementation of dosbox.")),Object(a.b)("h2",{id:"protocol"},"Protocol"),Object(a.b)("p",null,"The idea of new js-dos v7 is that all targets (native and web) have exactly\nsame way to communicate between client (native UI, browser UI) and dosbox."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-c",metastring:'title="https://raw.githubusercontent.com/caiiiycuk/js-dos/emulators/src/include/protocol.h"',title:'"https://raw.githubusercontent.com/caiiiycuk/js-dos/emulators/src/include/protocol.h"'},"{}\n")),Object(a.b)("h2",{id:"server"},"Server"),Object(a.b)("p",null,"For simplicity you can think that the server is a dosbox.\nIn the future servers can be implemented with different emulators. Now we support\nonly ",Object(a.b)("strong",{parentName:"p"},"dosbox implementation")," (look at ",Object(a.b)("inlineCode",{parentName:"p"},"jsdos.cmake"),")."),Object(a.b)("h3",{id:"server_run"},"server_run()"),Object(a.b)("p",null,"Client should run this function when it's ready to start dosbox. This\nfunction will start the emulator. Client should prepare file system for dosbox ",Object(a.b)("strong",{parentName:"p"},"it\nexpect that ",Object(a.b)("inlineCode",{parentName:"strong"},"cwd")," contains ",Object(a.b)("inlineCode",{parentName:"strong"},".jsdos/dosbox.conf")," file"),". "),Object(a.b)("p",null,"So you need to extract ",Object(a.b)("a",{parentName:"p",href:"/v7/build/docs/#js-dos-bundle"},"js-dos bundle")," in some directory and start sokol binary\nin this directory, and it will act exactly in the same way as direct/worker dosbox."),Object(a.b)("h3",{id:"server_add_keykeycode-pressed-timems"},"server_add_key(keycode, pressed, timeMs)"),Object(a.b)("p",null,"This function adds keycode to the queue. They will be processed when dosbox poll keyboard\nevents."),Object(a.b)("h3",{id:"server_exit"},"server_exit()"),Object(a.b)("p",null,"Terminates execution of dosbox and free resources."),Object(a.b)("h2",{id:"client"},"Client"),Object(a.b)("p",null,"Direct, worker, and sokol implementations share the same code for server part. But they are completely different,\nbecause they implement UI and sound system for different platforms. In original dosbox this was made\nby SDL, it was hard-coupled with dosbox. js-dos clearly detaches the emulator from its ui. You can easily add new\nUI/sound system to dosbox. "),Object(a.b)("p",null,"For example, let's look on sokol UI implementation. You can use it to debug and develop new features for js-dos.\nWorker is a primary web implementation for js-dos v7. sokol implementation tries to work in similar way: we start\ndosbox emulator in main thread and client in new thread."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"void runRuntime() {\n  std::thread client(client_run);\n  server_run();\n  client.join();\n}\n")),Object(a.b)("h3",{id:"client_frame_set_sizewidth-height"},"client_frame_set_size(width, height)"),Object(a.b)("p",null,"When the server starts it will send the frame size of the dosbox window by invoking ",Object(a.b)("inlineCode",{parentName:"p"},"client_frame_set_size"),". You should allocate rgba buffer to store frame content. This function will be called each time when dosbox window size is changed."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"extern int frameWidth = 0;\nextern int frameHeight = 0;\nextern uint32_t *frameRgba = 0;\n\nvoid client_frame_set_size(int width, int height) {\n  std::lock_guard<std::mutex> g(mutex);\n\n  if (frameRgba) {\n    delete[] frameRgba;\n  }\n  frameWidth = width;\n  frameHeight = height;\n  frameRgba = new uint32_t[width * height];\n}\n")),Object(a.b)("h3",{id:"client_frame_update_lineslines-count-rgba"},"client_frame_update_lines(lines, count, rgba)"),Object(a.b)("p",null,"This method will be called each time if contents of dosbox window are changed. dosbox implementation\nwill send only changed lines. You need to update your frame buffer correctly."),Object(a.b)("p",null,"Dirty region format (lines argument):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"line number [0, height)"),Object(a.b)("li",{parentName:"ul"},"count of changed lines"),Object(a.b)("li",{parentName:"ul"},"offset in passed buffer (rgba argument)")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"void client_frame_update_lines(uint32_t *lines, uint32_t count, void *rgba) {\n  std::lock_guard<std::mutex> g(mutex);\n\n  frameCount++;\n  if (!frameRgba) {\n    return;\n  }\n\n  for (uint32_t i = 0; i < count; ++i) {\n    uint32_t start = lines[i * 3];\n    uint32_t count = lines[i * 3 + 1];\n    uint32_t offset = lines[i * 3 + 2];\n    memcpy(&frameRgba[start * frameWidth], (char *)rgba + offset,\n           sizeof(uint32_t) * count * frameWidth);\n  }\n}\n")),Object(a.b)("p",null,"Implementing ",Object(a.b)("inlineCode",{parentName:"p"},"client_frame_set_size")," and ",Object(a.b)("inlineCode",{parentName:"p"},"client_frame_update_lines")," is enough to render\ndosbox window:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"// ... \n   appDescription.frame_cb = []() { sokolFrame(); };\n// ...\n\nvoid sokolFrame() {\n  std::lock_guard<std::mutex> g(mutex);\n\n  // ...\n  \n  sg_image_content imageContent = {};\n  imageContent.subimage[0][0] = {};\n  imageContent.subimage[0][0].ptr = frameRgba;\n  imageContent.subimage[0][0].size =\n      (state->width) * (state->height) * (int)sizeof(uint32_t);\n\n  sg_update_image(state->bind.fs_images[0], &imageContent);\n\n  sg_begin_default_pass(&state->pass, state->width, state->height);\n  sg_apply_pipeline(state->pipeline);\n  sg_apply_bindings(&state->bind);\n  sg_draw(0, 4, 1);\n  sg_end_pass();\n  sg_commit();\n\n  renderedFrame = frameCount;\n}\n")),Object(a.b)("h3",{id:"client_sound_initfreq"},"client_sound_init(freq);"),Object(a.b)("p",null,"Called when the dosbox needs to initialize the sound system. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"void client_sound_init(int freq) {\n  saudio_desc audioDescription = {};\n  audioDescription.sample_rate = static_cast<int>(freq);\n  audioDescription.num_channels = 1;\n\n  saudio_setup(&audioDescription);\n  assert(saudio_isvalid());\n}\n")),Object(a.b)("h3",{id:"client_sound_pushsamples-num_samples"},"client_sound_push(samples, num_samples)"),Object(a.b)("p",null,"This method is called each time when new sound samples should be pushed to audio device.\nWith sokol implementation is very simple:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"void client_sound_push(const float *samples, int num_samples) {\n  saudio_push(samples, num_samples);\n}\n")),Object(a.b)("h3",{id:"client_stdoutdata-amount"},"client_stdout(data, amount)"),Object(a.b)("p",null,"This method will be called each time when dosbox prints something to its console."),Object(a.b)("h3",{id:"communicate-to-server"},"Communicate to server"),Object(a.b)("p",null,"Each time when key is pressed we should send event to dosbox:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"// ...\n  appDescription.event_cb = [](const sapp_event *event) {\n    switch (event->type) {\n      case SAPP_EVENTTYPE_KEY_DOWN:\n      case SAPP_EVENTTYPE_KEY_UP:\n        keyEvent(event);\n        break;\n      default:;\n    }\n  };\n// ...\n\n\nvoid keyEvent(const sapp_event *event) {\n  server_add_key(\n      (KBD_KEYS)event->key_code,\n      event->type == SAPP_EVENTTYPE_KEY_DOWN,\n      GetMsPassedFromStart());\n}\n")),Object(a.b)("p",null,"When user closes sokol window we need to stop server:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"  appDescription.cleanup_cb = []() { server_exit(); };\n")),Object(a.b)("p",null,"That is. Check complete ",Object(a.b)("a",{parentName:"p",href:"https://github.com/caiiiycuk/js-dos/tree/emulators/src/dos/sokol"},"source")," of sokol implementation."),Object(a.b)("h2",{id:"testing"},"Testing"),Object(a.b)("p",null,"If the ",Object(a.b)("inlineCode",{parentName:"p"},"gulp")," command is finished successfully then you can run emulators tests.\nTo do this, run a static web server to host the ",Object(a.b)("inlineCode",{parentName:"p"},"dist")," directory. For example, with ",Object(a.b)("inlineCode",{parentName:"p"},"http-server"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"hs dist\n")),Object(a.b)("p",null,"and open test page in browser:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"firefox http://127.0.0.1:8080/test/test.html\n")),Object(a.b)("p",null,"all tests should pass."),Object(a.b)("h2",{id:"running-native-js-dos-v7"},"Running native js-dos v7"),Object(a.b)("p",null,"As said above, you need to compile a ",Object(a.b)("inlineCode",{parentName:"p"},"sokol")," target with your favorite C++ toolkit. It will generate ",Object(a.b)("inlineCode",{parentName:"p"},"sokol"),"\nexecutable. Next, you need to download some ",Object(a.b)("a",{parentName:"p",href:"/v7/build/docs/#js-dos-bundle"},"js-dos bundle")," for example\n",Object(a.b)("a",{parentName:"p",href:"https://talks.dos.zone/t/digger-may-06-1999/1922"},"digger"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"js-dos bundle")," is a plain zip archive, you need to extract it in some folder. After that you\nshould run ",Object(a.b)("inlineCode",{parentName:"p"},"sokol")," executable from that folder (cwd must be the root of the extracted bundle). "),Object(a.b)("h2",{id:"using-docker"},"Using Docker"),Object(a.b)("p",null,"You can use docker image to develop emulators core. The image has already configured\neverything to build emulators core and start emulators tests."),Object(a.b)("h3",{id:"build-image"},"Build image"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    docker build -t emulators . \n")),Object(a.b)("h3",{id:"test-image"},"Test image"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    docker run -p 8080:8080 -ti emulators\n")),Object(a.b)("p",null,"Open ",Object(a.b)("inlineCode",{parentName:"p"},"http://localhost:8080")," in browser, all tests should pass"),Object(a.b)("h3",{id:"development"},"Development"),Object(a.b)("p",null,"Run inside the project dir:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    docker run -v `pwd`/src:/app/src -v `pwd`/test:/app/test -v `pwd`/dist:/app/dist -ti emulators bash\n    source /emsdk/emsdk_env.sh\n    gulp OR ./node_modules/.bin/tsc --watch\n")),Object(a.b)("p",null,"Use your code editor to edit the content of src and test.\nIn the docker VM you can run ",Object(a.b)("inlineCode",{parentName:"p"},"gulp")," to build everything into ",Object(a.b)("inlineCode",{parentName:"p"},"dist")," OR use\n",Object(a.b)("inlineCode",{parentName:"p"},"./node_modules/.bin/tsc --watch")," if you need only compile time checks."),Object(a.b)("h2",{id:"contributing-on-github"},"Contributing on github"),Object(a.b)("p",null,"To contribute your code please create PR on github, and check if all tests passed."))}d.isMDXComponent=!0}}]);