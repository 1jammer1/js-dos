"use strict";(self.webpackChunkjs_dos=self.webpackChunkjs_dos||[]).push([[717],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6133:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(4034),o=n(9973),a=(n(7294),n(3905)),i={id:"save-load",title:"Save/Load"},s=void 0,l={unversionedId:"save-load",id:"save-load",isDocsHomePage:!1,title:"Save/Load",description:"js-dos supports saving and restoring game progress. You can play in game from time to time",source:"@site/docs/save-load.md",sourceDirName:".",slug:"/save-load",permalink:"/v7/build/docs/save-load",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/save-load.md",version:"current",frontMatter:{id:"save-load",title:"Save/Load"},sidebar:"someSidebar",previous:{title:"Mobile support",permalink:"/v7/build/docs/mobile-support"},next:{title:"Contributing",permalink:"/v7/build/docs/contributing-jsdos"}},u=[{value:"Where progress is stored",id:"where-progress-is-stored",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"js-dos supports saving and restoring game progress. You can play in game from time to time\nwithout losing progress. It's working automatically while you don't change bundle url."),(0,a.kt)("p",null,"This feature works by dumping changes in file system into second ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle")," and use it to override original file system\non next load. This feature is backed by ",(0,a.kt)("a",{parentName:"p",href:"/v7/build/docs/command-interface"},"CommandInterface")," ",(0,a.kt)("inlineCode",{parentName:"p"},"persist")," function."),(0,a.kt)("p",null,"You can implement your own save/load feature like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const ci = await Dos(<element>).run(<bundle url>);\n\n// saving\nconst changesBundle = await ci.persist();\n\n// <new session>\n\n// loading\nconst ci = await Dos(<element>)\n  .run(<original bundle url>, \n       URL.createObjectURL(new Blob([changesBundle.buffer]));\n\n")),(0,a.kt)("h2",{id:"where-progress-is-stored"},"Where progress is stored"),(0,a.kt)("p",null,"While you use default Save/Load feature of js-dos all updates are stored in indexed db ",(0,a.kt)("inlineCode",{parentName:"p"},"emulators-ui-saves"),".\nThe changes bundle is stored like key value record, where key is a ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle url")," and value is ",(0,a.kt)("inlineCode",{parentName:"p"},"Uint8Array")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"ci.persist()")," call."),(0,a.kt)("p",null,"All progress will be lost if you change bundle url."),(0,a.kt)("p",null,"Default implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="https://raw.githubusercontent.com/js-dos/emulators-ui/main/src/persist/save-load.ts"',title:'"https://raw.githubusercontent.com/js-dos/emulators-ui/main/src/persist/save-load.ts"'},"{}\n")))}p.isMDXComponent=!0}}]);