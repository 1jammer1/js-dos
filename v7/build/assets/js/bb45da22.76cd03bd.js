"use strict";(self.webpackChunkgh_pages=self.webpackChunkgh_pages||[]).push([[257],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7611:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>s,toc:()=>l,default:()=>p});var r=t(4034),a=(t(7294),t(3905));const o={id:"node",title:"In node.js"},i=void 0,s={unversionedId:"node",id:"node",isDocsHomePage:!1,title:"In node.js",description:"In this tutorial we will run Digger game in Node.js and save game screenshot to image.",source:"@site/docs/node.md",sourceDirName:".",slug:"/node",permalink:"/v7/build/docs/node",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/node.md",tags:[],version:"current",frontMatter:{id:"node",title:"In node.js"},sidebar:"someSidebar",previous:{title:"In browser",permalink:"/v7/build/docs/browser"},next:{title:"In React (TypeScript)",permalink:"/v7/build/docs/react"}},l=[],c={toc:l};function p({components:e,...n}){return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this tutorial we will run Digger game in Node.js and save game screenshot to image."),(0,a.kt)("p",null,"Let's start with creating empty project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm init\n")),(0,a.kt)("p",null,"In node environment you can use only ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/emulators"},"emulators")," package, becuse ",(0,a.kt)("inlineCode",{parentName:"p"},"emulators-ui")," is made for browser integraions. For creating screenshot we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"jimp")," library. So let's install them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save emulators jimp\n")),(0,a.kt)("p",null,"Next we need to download Digger ",(0,a.kt)("a",{parentName:"p",href:"jsdos-bundle"},"js-dos bundle"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl https://cdn.dos.zone/original/2X/2/24b00b14f118580763440ecaddcc948f8cb94f14.jsdos -o digger.jsdos\n")),(0,a.kt)("p",null,"We will edit file named ",(0,a.kt)("inlineCode",{parentName:"p"},"digger.js"),". We can run it with this command ",(0,a.kt)("inlineCode",{parentName:"p"},"node digger.js")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use require to import all libraries")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst jimp = require("jimp");\n\nrequire("emulators");\n\nconst emulators = global.emulators;\nemulators.pathPrefix = "./";\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"emulators package is made for browser, it didn't export anything. It inject itself into global object.\nIn node ",(0,a.kt)("inlineCode",{parentName:"p"},"pathPrefix")," is relative to ",(0,a.kt)("inlineCode",{parentName:"p"},"require")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Now we need to read contents of ",(0,a.kt)("inlineCode",{parentName:"strong"},"jsdos bundle")," and start emulation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const bundle = fs.readFileSync("digger.jsdos");\n\nemulators\n    .dosDirect(bundle)\n    .then((ci) => {\n      // ...\n    });\n')),(0,a.kt)("p",null,"When dos emulation starts, we will recive ",(0,a.kt)("a",{parentName:"p",href:"command-interface"},"Command Interface"),", we can use it\nto subscribe on frame updates and to send key/mouse events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"    let rgb = new Uint8Array(0);\n    ci.events().onFrame((frame) => {\n        this.rgb = frame;\n    });\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Now we have frame, it's in RGB format. We only need to save it to png image:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'    const width = ci.width();\n    const height = ci.height();\n\n    const rgba = new Uint8Array(width * height * 4);\n    for (let next = 0; next < width * height; ++next) {\n        rgba[next * 4 + 0] = rgb[next * 3 + 0];\n        rgba[next * 4 + 1] = rgb[next * 3 + 1];\n        rgba[next * 4 + 2] = rgb[next * 3 + 2];\n        rgba[next * 4 + 3] = 255;\n    }\n\n    new jimp({ data: rgba, width, height }, (err, image) => {\n        image.write("./screenshot.png", () => {\n            ci.exit();\n        });\n    });\n')),(0,a.kt)("p",null,"If you execute ",(0,a.kt)("inlineCode",{parentName:"p"},"node digger.js")," it will save digger screenshot to ",(0,a.kt)("inlineCode",{parentName:"p"},"./screenshot.png"),"."),(0,a.kt)("p",null,"Full code of ",(0,a.kt)("inlineCode",{parentName:"p"},"digger.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst jimp = require("jimp");\n\nrequire("emulators");\n\nconst emulators = global.emulators;\nemulators.pathPrefix = "./";\n\nconst bundle = fs.readFileSync("digger.jsdos");\n\nemulators\n    .dosDirect(bundle)\n    .then((ci) => {\n        let rgba = new Uint8Array(0);\n        ci.events().onFrame((frame) => {\n            rgba = frame;\n        });\n\n        // capture the screen after 3 sec\n        console.log("Will capture screen after 3 sec...");\n        setTimeout(() => {\n            const width = ci.width();\n            const height = ci.height();\n\n            const rgba = new Uint8Array(width * height * 4);\n            for (let next = 0; next < width * height; ++next) {\n                rgba[next * 4 + 0] = rgb[next * 3 + 0];\n                rgba[next * 4 + 1] = rgb[next * 3 + 1];\n                rgba[next * 4 + 2] = rgb[next * 3 + 2];\n                rgba[next * 4 + 3] = 255;\n            }\n\n            new jimp({ data: rgba, width, height }, (err, image) => {\n                image.write("./screenshot.png", () => {\n                    ci.exit();\n                });\n            });\n        }, 3000);\n    })\n    .catch(console.error);\n')))}p.isMDXComponent=!0}}]);