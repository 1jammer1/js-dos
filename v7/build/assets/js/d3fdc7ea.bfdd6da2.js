"use strict";(self.webpackChunkgh_pages=self.webpackChunkgh_pages||[]).push([[548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6134:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>s,metadata:()=>i,toc:()=>c,default:()=>u});var r=n(4034),o=(n(7294),n(3905));const a={id:"dosbox-direct",title:"DOSBOX Direct"},s=void 0,i={unversionedId:"dosbox-direct",id:"dosbox-direct",isDocsHomePage:!1,title:"DOSBOX Direct",description:"DOS Direct is an emulation backend based on dosbox, you can create it with following command:",source:"@site/docs/dosbox-direct.md",sourceDirName:".",slug:"/dosbox-direct",permalink:"/v7/build/docs/dosbox-direct",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/dosbox-direct.md",tags:[],version:"current",frontMatter:{id:"dosbox-direct",title:"DOSBOX Direct"},sidebar:"someSidebar",previous:{title:"Contributing in client-side features",permalink:"/v7/build/docs/contributing-emulators-ui"},next:{title:"DOSBOS Worker",permalink:"/v7/build/docs/dosbox-worker"}},c=[{value:"Accessing file system",id:"accessing-file-system",children:[]},{value:"Accessing memory",id:"accessing-memory",children:[]},{value:"Pausing execution",id:"pausing-execution",children:[]}],l={toc:c};function u({components:e,...t}){return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"DOS Direct is an emulation backend based on dosbox, you can create it with following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\n")),(0,o.kt)("p",null,"In theory the direct version is the fastest possible version of the emulator backend. But it has a strong disadvantage: it's working on the main browser thread. So it can easily hang a browser for some amount of time, and not be very responsive."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"/v7/build/docs/dosbox-worker"},"DOSBOX Worker")," is a more preferred version of the emulator backend, because it does not block the browser."))),(0,o.kt)("h3",{id:"accessing-file-system"},"Accessing file system"),(0,o.kt)("p",null,"In direct mode you can easily access emscripten module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\nci.transport.module // <-- emscripten module\n")),(0,o.kt)("p",null,"Emscripten module provide lowlevel api to change ",(0,o.kt)("a",{parentName:"p",href:"https://emscripten.org/docs/api_reference/Filesystem-API.html"},"file system"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\nci.transport.module.FS // <-- emscripten FS api\n")),(0,o.kt)("p",null,"You can also rescan DOS devices:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\nci.transport.module._rescanFilesystem();\n")),(0,o.kt)("h3",{id:"accessing-memory"},"Accessing memory"),(0,o.kt)("p",null,"In direct mode you can dump whole memory of dos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\nci.transport.module._dumpMemory(copyDosMemory);\nci.transport.module.memoryContents // <-- now you can access contents using this var\n")),(0,o.kt)("p",null,"If you need to copy entire memory pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," as argument.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"memoryContents")," contains following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n        "memBase": ...,\n        "ip": ...,\n        "flags": ...,\n        "registers": {\n            "ax": ...,\n            "cx": ...,\n            "dx": ...,\n            "sp": ...,\n            "bp": ...,\n            "si": ...,\n            "di": ...\n        },\n        "segments_values": {\n            "es": ...,\n            "cs": ...,\n            "ss": ...,\n            "ds": ...,\n            "fs": ...,\n            "gs": ...\n        },\n        "segments_physical": {\n            "es": ...,\n            "cs": ...,\n            "ss": ...,\n            "ds": ...,\n            "fs": ...,\n            "gs": ...\n        },\n        "numPages": ...,\n        "memoryCopy": ...\n}\n')),(0,o.kt)("h3",{id:"pausing-execution"},"Pausing execution"),(0,o.kt)("p",null,"In direct mode, you can pause the Dosbox execution loop without pausing the\nemscripten loop.  This lets you pause and inspect the current memory, for\ninstance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ci = await emulators.dosboxDirect(bundle);\nci.transport.module._pauseExecution(true);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"_pauseExecution")," function takes as its argument whether it should be\npaused or should resume.  To resume once you have completed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ci.transport.module._pauseExecution(false);\n")))}u.isMDXComponent=!0}}]);