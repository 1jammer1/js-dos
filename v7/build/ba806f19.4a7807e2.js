(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{146:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return u}));var r=n(2),o=n(11),i=(n(0),n(158)),a={id:"estimating-performance",title:"Esitmating emulators performance"},s={id:"estimating-performance",isDocsHomePage:!1,title:"Esitmating emulators performance",description:"Performance testing",source:"@site/docs/estimating-performance.md",permalink:"/v7/build/docs/estimating-performance",editUrl:"https://github.com/caiiiycuk/js-dos/edit/gh-pages/v7/docs/estimating-performance.md",sidebar:"someSidebar",previous:{title:"Releases",permalink:"/v7/build/docs/releases"}},d=[{value:"Performance testing",id:"performance-testing",children:[]},{value:"Running the test",id:"running-the-test",children:[]}],c={rightToc:d};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"performance-testing"},"Performance testing"),Object(i.b)("p",null,"To measure performance we used variant of Dhrystone 2 Test originally taken from this ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"http://www.roylongbottom.org.uk/dhrystone%20results.htm"}),"page"),". Original version used ",Object(i.b)("inlineCode",{parentName:"p"},"clock()")," to calculate delta time. Which is good for real pc, but does not very accurate for dosbox emulator. When ",Object(i.b)("inlineCode",{parentName:"p"},"clock()")," call happened modified version send ",Object(i.b)("inlineCode",{parentName:"p"},"~>dtime")," marker to stdout which intercepted by test page and used to calculate delta time with ",Object(i.b)("inlineCode",{parentName:"p"},"performance.now()")," from browser. Source code of modified test is ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/caiiiycuk/js-dos/tree/6.22/programms/dhry2"}),"here"),"."),Object(i.b)("p",null,"Basically this test produce a lot of int operations and measure amount of operations (Dhrystones) produced per second. Output is a ",Object(i.b)("inlineCode",{parentName:"p"},"VAX MIPS RATING")," which is Drhystones per second divided by 1757 (is as DEC VAX 11/780 result)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"js-dos bundle")," with this test can be found on ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://talks.dos.zone/t/dhrystone-2-test-jul-2020/37086"}),"Test")," page."),Object(i.b)("h2",{id:"running-the-test"},"Running the test"),Object(i.b)("p",null,"To run this test we should use ",Object(i.b)("inlineCode",{parentName:"p"},"emulators.js")," (from emulators) and use our ",Object(i.b)("inlineCode",{parentName:"p"},"js-dos bundle")," to start test."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'function EstimateTest() {\n  let runId = 0;\n  function runBundle(bundle) {\n    const id = runId++;\n    const stdout = document.getElementById("stdout");\n\n    // here you can use also dosDirect\n    emulators.dosWorker(bundle)\n      // promise is resolved when emulator is started \n      .then((ci) => {\n        const time = [0, 0];\n        let timeIndex = 0;\n        let runs = 10000; \n        // listen program outpus for `~>dtime` marker\n        ci.events().onStdout((message) => {\n          if (message.indexOf("~>dtime") === -1) {\n            return;\n          }\n          \n          time[timeIndex++] = performance.now();\n          if (timeIndex === 2) {\n            const delta = time[1] - time[0];\n            stdout.innerHTML += (id) + ": " + runs + " runs, browser time " + delta + " ms, " +\n                 "VAX rating " + (runs * 1000 / delta / 1757) + "\\n";\n            runs *= 2;\n            timeIndex = 0;\n               \n            if (delta > 3000) {\n              //properly exit\n              ci.exit();\n             }\n            }\n        });\n      });\n  }\n\n  function onClick() {\n    const bundleUrl = "https://doszone-uploads.s3.dualstack.eu-central-1.amazonaws.com/original/2X/b/b4b5275904d86a4ab8a20917b2b7e34f0df47bf7.jsdos";\n\n    // we need to download bundle, emulators accept only Uint8Array\n    const xhr = new XMLHttpRequest();\n    xhr.open("GET", bundleUrl, true);\n    xhr.overrideMimeType("text/plain; charset=x-user-defined");\n    xhr.responseType = "arraybuffer";\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // do not forget to create Uint8Array, \n        // arraybuffer will not work!\n        runBundle(new Uint8Array(xhr.response));\n      }\n    };\n    xhr.send();\n  };\n  \n  return (\n    <div>\n      <button onClick={onClick}>Start</button>\n      <pre id="stdout"></pre>\n    </div>\n  );\n}\n')),Object(i.b)("p",null,"Try to change ",Object(i.b)("inlineCode",{parentName:"p"},"dosWorker")," to ",Object(i.b)("inlineCode",{parentName:"p"},"dosDirect")," and see how result is changing.\nIn worker mode each test will run in new worker. If you press ",Object(i.b)("inlineCode",{parentName:"p"},"Start")," multiple times,\nthen you will see output from multiple threads. In direct mode browser will probably hangs."))}u.isMDXComponent=!0}}]);